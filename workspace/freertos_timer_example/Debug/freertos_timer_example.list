
freertos_timer_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  0800752c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e18  20000078  080075a0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e90  080075a0  00021e90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000258ab  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044ea  00000000  00000000  00045953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021e0  00000000  00000000  00049e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002068  00000000  00000000  0004c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000046ca  00000000  00000000  0004e088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020a2e  00000000  00000000  00052752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ed19a  00000000  00000000  00073180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0016031a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009388  00000000  00000000  0016036c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080072e8 	.word	0x080072e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080072e8 	.word	0x080072e8

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fc18 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f848 	bl	8000580 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f0:	f000 f8bc 	bl	800066c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f94c 	bl	8000790 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f8d6 	bl	80006a8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004fc:	f000 f920 	bl	8000740 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 ff00 	bl	8004304 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of uartTimer */
  uartTimerHandle = osTimerNew(uartTimerCallback, osTimerPeriodic, NULL, &uartTimer_attributes);
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0x6c>)
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <main+0x70>)
 800050c:	f004 f806 	bl	800451c <osTimerNew>
 8000510:	4603      	mov	r3, r0
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <main+0x74>)
 8000514:	6013      	str	r3, [r2, #0]

  /* creation of ledTimer */
  ledTimerHandle = osTimerNew(ledTimerCallback, osTimerOnce, NULL, &ledTimer_attributes);
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x78>)
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	4810      	ldr	r0, [pc, #64]	; (8000560 <main+0x7c>)
 800051e:	f003 fffd 	bl	800451c <osTimerNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0x80>)
 8000526:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(uartDefaultTask, NULL, &uartTask_attributes);
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <main+0x84>)
 800052a:	2100      	movs	r1, #0
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x88>)
 800052e:	f003 ff33 	bl	8004398 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <main+0x8c>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(ledDefaultTask, NULL, &ledTask_attributes);
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <main+0x90>)
 800053a:	2100      	movs	r1, #0
 800053c:	480e      	ldr	r0, [pc, #56]	; (8000578 <main+0x94>)
 800053e:	f003 ff2b 	bl	8004398 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x98>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f003 ff00 	bl	800434c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x68>
 800054e:	bf00      	nop
 8000550:	080073d4 	.word	0x080073d4
 8000554:	080008a9 	.word	0x080008a9
 8000558:	20000420 	.word	0x20000420
 800055c:	080073e4 	.word	0x080073e4
 8000560:	080008cd 	.word	0x080008cd
 8000564:	20000424 	.word	0x20000424
 8000568:	0800738c 	.word	0x0800738c
 800056c:	08000821 	.word	0x08000821
 8000570:	20000418 	.word	0x20000418
 8000574:	080073b0 	.word	0x080073b0
 8000578:	08000865 	.word	0x08000865
 800057c:	2000041c 	.word	0x2000041c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b09a      	sub	sp, #104	; 0x68
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2248      	movs	r2, #72	; 0x48
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fde0 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005b4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	f023 0303 	bic.w	r3, r3, #3
 80005c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ca:	f000 ff83 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff58 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xe8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xe8>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xe8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80005f0:	2327      	movs	r3, #39	; 0x27
 80005f2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800060c:	2300      	movs	r3, #0
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 faf9 	bl	8001c14 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000628:	f000 f972 	bl	8000910 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800062c:	236f      	movs	r3, #111	; 0x6f
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000630:	2302      	movs	r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fe6f 	bl	8002330 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000658:	f000 f95a 	bl	8000910 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065c:	f002 fc5c 	bl	8002f18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000660:	bf00      	nop
 8000662:	3768      	adds	r7, #104	; 0x68
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58000400 	.word	0x58000400

0800066c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2250      	movs	r2, #80	; 0x50
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f006 fd6b 	bl	8007154 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000688:	2300      	movs	r3, #0
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4618      	mov	r0, r3
 8000690:	f002 facc 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800069a:	f000 f939 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006ae:	4a23      	ldr	r2, [pc, #140]	; (800073c <MX_USART1_UART_Init+0x94>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_USART1_UART_Init+0x90>)
 80006f2:	f002 ffc1 	bl	8003678 <HAL_UART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006fc:	f000 f908 	bl	8000910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_USART1_UART_Init+0x90>)
 8000704:	f003 fcb4 	bl	8004070 <HAL_UARTEx_SetTxFifoThreshold>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800070e:	f000 f8ff 	bl	8000910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4808      	ldr	r0, [pc, #32]	; (8000738 <MX_USART1_UART_Init+0x90>)
 8000716:	f003 fce9 	bl	80040ec <HAL_UARTEx_SetRxFifoThreshold>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000720:	f000 f8f6 	bl	8000910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_USART1_UART_Init+0x90>)
 8000726:	f003 fc6a 	bl	8003ffe <HAL_UARTEx_DisableFifoMode>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000730:	f000 f8ee 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000094 	.word	0x20000094
 800073c:	40013800 	.word	0x40013800

08000740 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <MX_USB_PCD_Init+0x4c>)
 8000748:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USB_PCD_Init+0x48>)
 800074c:	2208      	movs	r2, #8
 800074e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000752:	2202      	movs	r2, #2
 8000754:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000758:	2202      	movs	r2, #2
 800075a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_USB_PCD_Init+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_USB_PCD_Init+0x48>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_USB_PCD_Init+0x48>)
 8000776:	f000 fd9d 	bl	80012b4 <HAL_PCD_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000780:	f000 f8c6 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000124 	.word	0x20000124
 800078c:	40006800 	.word	0x40006800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff fe83 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff fe80 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fe7d 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2008      	movs	r0, #8
 80007b8:	f7ff fe7a 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2123      	movs	r1, #35	; 0x23
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_GPIO_Init+0x84>)
 80007c2:	f000 fd5f 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	2310      	movs	r3, #16
 80007c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <MX_GPIO_Init+0x88>)
 80007d8:	f000 fbcc 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80007dc:	2323      	movs	r3, #35	; 0x23
 80007de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_GPIO_Init+0x84>)
 80007f2:	f000 fbbf 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80007f6:	2303      	movs	r3, #3
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_GPIO_Init+0x8c>)
 8000808:	f000 fbb4 	bl	8000f74 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	48000400 	.word	0x48000400
 8000818:	48000800 	.word	0x48000800
 800081c:	48000c00 	.word	0x48000c00

08000820 <uartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartDefaultTask */
void uartDefaultTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osTimerStart(uartTimerHandle, 1000);
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <uartDefaultTask+0x3c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	4618      	mov	r0, r3
 8000832:	f003 feef 	bl	8004614 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <uartDefaultTask+0x40>)
 800083c:	f000 fd22 	bl	8001284 <HAL_GPIO_WritePin>
    osDelay(3333);
 8000840:	f640 5005 	movw	r0, #3333	; 0xd05
 8000844:	f003 fe3a 	bl	80044bc <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2102      	movs	r1, #2
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <uartDefaultTask+0x40>)
 800084e:	f000 fd19 	bl	8001284 <HAL_GPIO_WritePin>
    osDelay(3333);
 8000852:	f640 5005 	movw	r0, #3333	; 0xd05
 8000856:	f003 fe31 	bl	80044bc <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800085a:	e7ec      	b.n	8000836 <uartDefaultTask+0x16>
 800085c:	20000420 	.word	0x20000420
 8000860:	48000400 	.word	0x48000400

08000864 <ledDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledDefaultTask */
void ledDefaultTask(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))
 800086c:	2110      	movs	r1, #16
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <ledDefaultTask+0x38>)
 8000870:	f000 fcf0 	bl	8001254 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10b      	bne.n	8000892 <ledDefaultTask+0x2e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <ledDefaultTask+0x3c>)
 8000880:	f000 fd00 	bl	8001284 <HAL_GPIO_WritePin>
		osTimerStart(ledTimerHandle, 5000);
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <ledDefaultTask+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f241 3188 	movw	r1, #5000	; 0x1388
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fec1 	bl	8004614 <osTimerStart>
	}
    osDelay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f003 fe12 	bl	80044bc <osDelay>
	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))
 8000898:	e7e8      	b.n	800086c <ledDefaultTask+0x8>
 800089a:	bf00      	nop
 800089c:	48000800 	.word	0x48000800
 80008a0:	48000400 	.word	0x48000400
 80008a4:	20000424 	.word	0x20000424

080008a8 <uartTimerCallback>:
  /* USER CODE END ledDefaultTask */
}

/* uartTimerCallback function */
void uartTimerCallback(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartTimerCallback */
  HAL_UART_Transmit(&huart1, "Sending From UART Timer\n", 24, 100);
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	2218      	movs	r2, #24
 80008b4:	4903      	ldr	r1, [pc, #12]	; (80008c4 <uartTimerCallback+0x1c>)
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <uartTimerCallback+0x20>)
 80008b8:	f002 ff2e 	bl	8003718 <HAL_UART_Transmit>
  /* USER CODE END uartTimerCallback */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0800732c 	.word	0x0800732c
 80008c8:	20000094 	.word	0x20000094

080008cc <ledTimerCallback>:

/* ledTimerCallback function */
void ledTimerCallback(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledTimerCallback */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <ledTimerCallback+0x1c>)
 80008da:	f000 fcd3 	bl	8001284 <HAL_GPIO_WritePin>
  /* USER CODE END ledTimerCallback */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	48000400 	.word	0x48000400

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fa2d 	bl	8000d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40014800 	.word	0x40014800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>

0800091a <LL_AHB2_GRP1_EnableClock>:
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800095a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4313      	orrs	r3, r2
 8000962:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000970:	68fb      	ldr	r3, [r7, #12]
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800098c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4313      	orrs	r3, r2
 8000994:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	210f      	movs	r1, #15
 80009b8:	f06f 0001 	mvn.w	r0, #1
 80009bc:	f000 fab2 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	; 0x70
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2250      	movs	r2, #80	; 0x50
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 fbb5 	bl	8007154 <memset>
  if(huart->Instance==USART1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_UART_MspInit+0x84>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d124      	bne.n	8000a3e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 f913 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ff80 	bl	8000910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a14:	f7ff ffb3 	bl	800097e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff ff7e 	bl	800091a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <HAL_UART_MspInit+0x88>)
 8000a3a:	f000 fa9b 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3770      	adds	r7, #112	; 0x70
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	48000400 	.word	0x48000400

08000a50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2250      	movs	r2, #80	; 0x50
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 fb6f 	bl	8007154 <memset>
  if(hpcd->Instance==USB)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_PCD_MspInit+0xa8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d136      	bne.n	8000aee <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a86:	2318      	movs	r3, #24
 8000a88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000aa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 f8bd 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ab8:	f7ff ff2a 	bl	8000910 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff ff2c 	bl	800091a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ac2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fa47 	bl	8000f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ae6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000aea:	f7ff ff2f 	bl	800094c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3770      	adds	r7, #112	; 0x70
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40006800 	.word	0x40006800

08000afc <LL_APB2_GRP1_EnableClock>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b20:	68fb      	ldr	r3, [r7, #12]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	201a      	movs	r0, #26
 8000b46:	f000 f9ed 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b4a:	201a      	movs	r0, #26
 8000b4c:	f000 fa04 	bl	8000f58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b50:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b54:	f7ff ffd2 	bl	8000afc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fdd0 	bl	8002708 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b68:	f001 fdb8 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8000b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0x8c>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	0c9b      	lsrs	r3, r3, #18
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_InitTick+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b9e:	f002 fad2 	bl	8003146 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d104      	bne.n	8000bb2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_InitTick+0x90>)
 8000baa:	f002 fb2d 	bl	8003208 <HAL_TIM_Base_Start_IT>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3730      	adds	r7, #48	; 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20000428 	.word	0x20000428
 8000bc4:	40014800 	.word	0x40014800

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000bfa:	f002 fb53 	bl	80032a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000428 	.word	0x20000428

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <SystemInit+0x98>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <SystemInit+0x98>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c30:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c34:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SystemInit+0x9c>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c52:	f023 0305 	bic.w	r3, r3, #5
 8000c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c72:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <SystemInit+0xa0>)
 8000c74:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <SystemInit+0xa0>)
 8000c7c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	faf6fefb 	.word	0xfaf6fefb
 8000ca8:	22041000 	.word	0x22041000

08000cac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000cac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb0:	3304      	adds	r3, #4

08000cb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000cb6:	d3f9      	bcc.n	8000cac <CopyDataInit>
  bx lr
 8000cb8:	4770      	bx	lr

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000cba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000cbc:	3004      	adds	r0, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000cbe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>
  bx lr
 8000cc2:	4770      	bx	lr

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff ff9e 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <LoopForever+0x8>)
 8000cce:	490c      	ldr	r1, [pc, #48]	; (8000d00 <LoopForever+0xc>)
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <LoopForever+0x10>)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f7ff ffed 	bl	8000cb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <LoopForever+0x14>)
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <LoopForever+0x18>)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f7ff ffee 	bl	8000cbe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <LoopForever+0x1c>)
 8000ce4:	490b      	ldr	r1, [pc, #44]	; (8000d14 <LoopForever+0x20>)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f7ff ffe9 	bl	8000cbe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cec:	f006 f9fe 	bl	80070ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000cf0:	f7ff fbf8 	bl	80004e4 <main>

08000cf4 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf4:	e7fe      	b.n	8000cf4 <LoopForever>
 8000cf6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000cf8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000078 	.word	0x20000078
 8000d04:	0800752c 	.word	0x0800752c
  INIT_BSS _sbss, _ebss
 8000d08:	20000078 	.word	0x20000078
 8000d0c:	20001e90 	.word	0x20001e90
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d10:	20030000 	.word	0x20030000
 8000d14:	20030000 	.word	0x20030000

08000d18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_Init+0x3c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_Init+0x3c>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f8eb 	bl	8000f0e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f7ff fef9 	bl	8000b30 <HAL_InitTick>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	e001      	b.n	8000d4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4a:	f7ff fe31 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58004000 	.word	0x58004000

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000474 	.word	0x20000474

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000474 	.word	0x20000474

08000d9c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTickPrio+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff4c 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f32:	f7ff ff63 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f7ff ffb3 	bl	8000ea8 <NVIC_EncodePriority>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff82 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff56 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	e14c      	b.n	800121e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 813e 	beq.w	8001218 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <HAL_GPIO_Init+0x40>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b03      	cmp	r3, #3
 8001020:	d017      	beq.n	8001052 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d123      	bne.n	80010a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0203 	and.w	r2, r3, #3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8098 	beq.w	8001218 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010e8:	4a54      	ldr	r2, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2c8>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001112:	d019      	beq.n	8001148 <HAL_GPIO_Init+0x1d4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x2cc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_GPIO_Init+0x1d0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00d      	beq.n	8001140 <HAL_GPIO_Init+0x1cc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2d4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x1c8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2d8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_GPIO_Init+0x1c4>
 8001134:	2304      	movs	r3, #4
 8001136:	e008      	b.n	800114a <HAL_GPIO_Init+0x1d6>
 8001138:	2307      	movs	r3, #7
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x1d6>
 800113c:	2303      	movs	r3, #3
 800113e:	e004      	b.n	800114a <HAL_GPIO_Init+0x1d6>
 8001140:	2302      	movs	r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x1d6>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_GPIO_Init+0x1d6>
 8001148:	2300      	movs	r3, #0
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4093      	lsls	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800115a:	4938      	ldr	r1, [pc, #224]	; (800123c <HAL_GPIO_Init+0x2c8>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800118c:	4a30      	ldr	r2, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e2:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 80011ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	f47f aeab 	bne.w	8000f84 <HAL_GPIO_Init+0x10>
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40010000 	.word	0x40010000
 8001240:	48000400 	.word	0x48000400
 8001244:	48000800 	.word	0x48000800
 8001248:	48000c00 	.word	0x48000c00
 800124c:	48001000 	.word	0x48001000
 8001250:	58000800 	.word	0x58000800

08001254 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af06      	add	r7, sp, #24
 80012ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0d7      	b.n	8001476 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d106      	bne.n	80012e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fbb8 	bl	8000a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 ff89 	bl	8004204 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e04c      	b.n	8001392 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	440b      	add	r3, r1
 8001308:	3301      	adds	r3, #1
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	b298      	uxth	r0, r3
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	3336      	adds	r3, #54	; 0x36
 8001336:	4602      	mov	r2, r0
 8001338:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3303      	adds	r3, #3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	333c      	adds	r3, #60	; 0x3c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3340      	adds	r3, #64	; 0x40
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3ad      	bcc.n	80012f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e044      	b.n	800142c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3b5      	bcc.n	80013a2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	687e      	ldr	r6, [r7, #4]
 800143e:	466d      	mov	r5, sp
 8001440:	f106 0410 	add.w	r4, r6, #16
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	602b      	str	r3, [r5, #0]
 800144c:	1d33      	adds	r3, r6, #4
 800144e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f002 fef2 	bl	800423a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f805 	bl	800147e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800147e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	58000400 	.word	0x58000400

080014f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	58000400 	.word	0x58000400

08001510 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001522:	d101      	bne.n	8001528 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_RCC_HSE_Enable>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_RCC_HSE_Disable>:
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_RCC_HSE_IsReady>:
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001582:	d101      	bne.n	8001588 <LL_RCC_HSE_IsReady+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_RCC_HSE_IsReady+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_RCC_HSI_Enable>:
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_HSI_Disable>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_RCC_HSI_IsReady>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e2:	d101      	bne.n	80015e8 <LL_RCC_HSI_IsReady+0x18>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_RCC_HSI_IsReady+0x1a>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_RCC_HSI48_Enable>:
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_RCC_HSI48_Disable>:
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_HSI48_IsReady>:
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b02      	cmp	r3, #2
 8001674:	d101      	bne.n	800167a <LL_RCC_HSI48_IsReady+0x18>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <LL_RCC_HSI48_IsReady+0x1a>
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_RCC_LSE_Enable>:
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_LSE_Disable>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_LSE_EnableBypass>:
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_LSE_DisableBypass>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d101      	bne.n	8001726 <LL_RCC_LSE_IsReady+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_RCC_LSE_IsReady+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d101      	bne.n	800178e <LL_RCC_LSI1_IsReady+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_RCC_LSI1_IsReady+0x1a>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d101      	bne.n	80017f6 <LL_RCC_LSI2_IsReady+0x18>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_RCC_LSI2_IsReady+0x1a>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181e:	4313      	orrs	r3, r2
 8001820:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d101      	bne.n	8001882 <LL_RCC_MSI_IsReady+0x16>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_RCC_MSI_IsReady+0x18>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2bb0      	cmp	r3, #176	; 0xb0
 80018cc:	d901      	bls.n	80018d2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80018ce:	23b0      	movs	r3, #176	; 0xb0
 80018d0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 0203 	bic.w	r2, r3, #3
 800191c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019ae:	f023 020f 	bic.w	r2, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ae8:	d101      	bne.n	8001aee <LL_RCC_PLL_IsReady+0x18>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_RCC_PLL_IsReady+0x1a>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d101      	bne.n	8001b74 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b94:	d101      	bne.n	8001b9a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bba:	d101      	bne.n	8001bc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bde:	d101      	bne.n	8001be4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c02:	d101      	bne.n	8001c08 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08d      	sub	sp, #52	; 0x34
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e37f      	b.n	8002326 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8092 	beq.w	8001d58 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	f7ff fe7d 	bl	8001932 <LL_RCC_GetSysClkSource>
 8001c38:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3a:	f7ff ff83 	bl	8001b44 <LL_RCC_PLL_GetMainSource>
 8001c3e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3e>
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d14c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d149      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c52:	f7ff fe0b 	bl	800186c <LL_RCC_MSI_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x54>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e35e      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c6c:	f7ff fe23 	bl	80018b6 <LL_RCC_MSI_GetRange>
 8001c70:	4603      	mov	r3, r0
 8001c72:	429c      	cmp	r4, r3
 8001c74:	d914      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fd76 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e34d      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fdfd 	bl	800188e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fe21 	bl	80018e0 <LL_RCC_MSI_SetCalibTrimming>
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fdf2 	bl	800188e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe16 	bl	80018e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fd57 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e32e      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cc8:	f000 fcde 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4aa5      	ldr	r2, [pc, #660]	; (8001f64 <HAL_RCC_OscConfig+0x350>)
 8001cd0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cd2:	4ba5      	ldr	r3, [pc, #660]	; (8001f68 <HAL_RCC_OscConfig+0x354>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe ff2a 	bl	8000b30 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d039      	beq.n	8001d56 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e31f      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01e      	beq.n	8001d2c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cee:	f7ff fd9f 	bl	8001830 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f847 	bl	8000d84 <HAL_GetTick>
 8001cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f843 	bl	8000d84 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e30c      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d0c:	f7ff fdae 	bl	800186c <LL_RCC_MSI_IsReady>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f1      	beq.n	8001cfa <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fdb7 	bl	800188e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fddb 	bl	80018e0 <LL_RCC_MSI_SetCalibTrimming>
 8001d2a:	e015      	b.n	8001d58 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2c:	f7ff fd8f 	bl	800184e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f828 	bl	8000d84 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d38:	f7ff f824 	bl	8000d84 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2ed      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d4a:	f7ff fd8f 	bl	800186c <LL_RCC_MSI_IsReady>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f1      	bne.n	8001d38 <HAL_RCC_OscConfig+0x124>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d56:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d04e      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d64:	f7ff fde5 	bl	8001932 <LL_RCC_GetSysClkSource>
 8001d68:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6a:	f7ff feeb 	bl	8001b44 <LL_RCC_PLL_GetMainSource>
 8001d6e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x16e>
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d10d      	bne.n	8001d98 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d10a      	bne.n	8001d98 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	f7ff fbf5 	bl	8001570 <LL_RCC_HSE_IsReady>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d039      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d135      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e2c6      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x194>
 8001da2:	f7ff fbc7 	bl	8001534 <LL_RCC_HSE_Enable>
 8001da6:	e001      	b.n	8001dac <HAL_RCC_OscConfig+0x198>
 8001da8:	f7ff fbd3 	bl	8001552 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe ffe6 	bl	8000d84 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ffe2 	bl	8000d84 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e2ab      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dce:	f7ff fbcf 	bl	8001570 <LL_RCC_HSE_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f1      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1a8>
 8001dd8:	e013      	b.n	8001e02 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7fe ffd3 	bl	8000d84 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de2:	f7fe ffcf 	bl	8000d84 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e298      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001df4:	f7ff fbbc 	bl	8001570 <LL_RCC_HSE_IsReady>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f1      	bne.n	8001de2 <HAL_RCC_OscConfig+0x1ce>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d051      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0e:	f7ff fd90 	bl	8001932 <LL_RCC_GetSysClkSource>
 8001e12:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e14:	f7ff fe96 	bl	8001b44 <LL_RCC_PLL_GetMainSource>
 8001e18:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x218>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d113      	bne.n	8001e4e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d110      	bne.n	8001e4e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2c:	f7ff fbd0 	bl	80015d0 <LL_RCC_HSI_IsReady>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x22e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e271      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fbd4 	bl	80015f4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	e031      	b.n	8001eb2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e56:	f7ff fb9d 	bl	8001594 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ff93 	bl	8000d84 <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7fe ff8f 	bl	8000d84 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e258      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e74:	f7ff fbac 	bl	80015d0 <LL_RCC_HSI_IsReady>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f1      	beq.n	8001e62 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fbb6 	bl	80015f4 <LL_RCC_HSI_SetCalibTrimming>
 8001e88:	e013      	b.n	8001eb2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	f7ff fb92 	bl	80015b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff79 	bl	8000d84 <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7fe ff75 	bl	8000d84 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e23e      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ea8:	f7ff fb92 	bl	80015d0 <LL_RCC_HSI_IsReady>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f1      	bne.n	8001e96 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a4 	beq.w	8002014 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d077      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d04b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ee0:	f7ff fc49 	bl	8001776 <LL_RCC_LSI1_IsReady>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d113      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001eea:	f7ff fc22 	bl	8001732 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eee:	f7fe ff49 	bl	8000d84 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ef6:	f7fe ff45 	bl	8000d84 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e20e      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f08:	f7ff fc35 	bl	8001776 <LL_RCC_LSI1_IsReady>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f1      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f12:	f7ff fc42 	bl	800179a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe ff35 	bl	8000d84 <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f1e:	f7fe ff31 	bl	8000d84 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1fa      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f30:	f7ff fc55 	bl	80017de <LL_RCC_LSI2_IsReady>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f1      	beq.n	8001f1e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fc5f 	bl	8001802 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f44:	f7ff fc06 	bl	8001754 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe ff1c 	bl	8000d84 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f50:	f7fe ff18 	bl	8000d84 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d906      	bls.n	8001f6c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1e1      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
 8001f62:	bf00      	nop
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f6c:	f7ff fc03 	bl	8001776 <LL_RCC_LSI1_IsReady>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ec      	bne.n	8001f50 <HAL_RCC_OscConfig+0x33c>
 8001f76:	e04d      	b.n	8002014 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f78:	f7ff fbdb 	bl	8001732 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff02 	bl	8000d84 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f84:	f7fe fefe 	bl	8000d84 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1c7      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f96:	f7ff fbee 	bl	8001776 <LL_RCC_LSI1_IsReady>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f1      	beq.n	8001f84 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fa0:	f7ff fc0c 	bl	80017bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fa6:	f7fe feed 	bl	8000d84 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1b6      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fb8:	f7ff fc11 	bl	80017de <LL_RCC_LSI2_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f1      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x392>
 8001fc2:	e027      	b.n	8002014 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fc4:	f7ff fbfa 	bl	80017bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe fedc 	bl	8000d84 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fd0:	f7fe fed8 	bl	8000d84 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1a1      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fe2:	f7ff fbfc 	bl	80017de <LL_RCC_LSI2_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f1      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001fec:	f7ff fbb2 	bl	8001754 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fec8 	bl	8000d84 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ff8:	f7fe fec4 	bl	8000d84 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e18d      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800200a:	f7ff fbb4 	bl	8001776 <LL_RCC_LSI1_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f1      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d05b      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002020:	4ba7      	ldr	r3, [pc, #668]	; (80022c0 <HAL_RCC_OscConfig+0x6ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d114      	bne.n	8002056 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800202c:	f7ff fa52 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7fe fea8 	bl	8000d84 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7fe fea4 	bl	8000d84 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e16d      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	4b9d      	ldr	r3, [pc, #628]	; (80022c0 <HAL_RCC_OscConfig+0x6ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_RCC_OscConfig+0x450>
 800205e:	f7ff fb12 	bl	8001686 <LL_RCC_LSE_Enable>
 8002062:	e00c      	b.n	800207e <HAL_RCC_OscConfig+0x46a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d104      	bne.n	8002076 <HAL_RCC_OscConfig+0x462>
 800206c:	f7ff fb2d 	bl	80016ca <LL_RCC_LSE_EnableBypass>
 8002070:	f7ff fb09 	bl	8001686 <LL_RCC_LSE_Enable>
 8002074:	e003      	b.n	800207e <HAL_RCC_OscConfig+0x46a>
 8002076:	f7ff fb17 	bl	80016a8 <LL_RCC_LSE_Disable>
 800207a:	f7ff fb37 	bl	80016ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d014      	beq.n	80020b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7fe fe7d 	bl	8000d84 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fe79 	bl	8000d84 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e140      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020a4:	f7ff fb33 	bl	800170e <LL_RCC_LSE_IsReady>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ef      	beq.n	800208e <HAL_RCC_OscConfig+0x47a>
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fe68 	bl	8000d84 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fe64 	bl	8000d84 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e12b      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020ce:	f7ff fb1e 	bl	800170e <LL_RCC_LSE_IsReady>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ef      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02c      	beq.n	800213e <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d014      	beq.n	8002116 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ec:	f7ff fa97 	bl	800161e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fe48 	bl	8000d84 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f8:	f7fe fe44 	bl	8000d84 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e10d      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800210a:	f7ff faaa 	bl	8001662 <LL_RCC_HSI48_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4e4>
 8002114:	e013      	b.n	800213e <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002116:	f7ff fa93 	bl	8001640 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7fe fe33 	bl	8000d84 <HAL_GetTick>
 800211e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002122:	f7fe fe2f 	bl	8000d84 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0f8      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002134:	f7ff fa95 	bl	8001662 <LL_RCC_HSI48_IsReady>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f1      	bne.n	8002122 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80ee 	beq.w	8002324 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002148:	f7ff fbf3 	bl	8001932 <LL_RCC_GetSysClkSource>
 800214c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80b4 	bne.w	80022c8 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	429a      	cmp	r2, r3
 800216c:	d123      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d11c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d114      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d05d      	beq.n	8002272 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d058      	beq.n	800226e <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0ab      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021ce:	f7ff fc73 	bl	8001ab8 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d2:	f7fe fdd7 	bl	8000d84 <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fdd3 	bl	8000d84 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e09c      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ef      	bne.n	80021da <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x6b0>)
 8002202:	4013      	ands	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002212:	0212      	lsls	r2, r2, #8
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002226:	430a      	orrs	r2, r1
 8002228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002230:	f7ff fc33 	bl	8001a9a <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002244:	f7fe fd9e 	bl	8000d84 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fd9a 	bl	8000d84 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e063      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ef      	beq.n	800224c <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226c:	e05a      	b.n	8002324 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e059      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d151      	bne.n	8002324 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002280:	f7ff fc0b 	bl	8001a9a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002294:	f7fe fd76 	bl	8000d84 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fd72 	bl	8000d84 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e03b      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCC_OscConfig+0x688>
 80022bc:	e032      	b.n	8002324 <HAL_RCC_OscConfig+0x710>
 80022be:	bf00      	nop
 80022c0:	58000400 	.word	0x58000400
 80022c4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d028      	beq.n	8002320 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	f7ff fbf3 	bl	8001ab8 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ec:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fd45 	bl	8000d84 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fd41 	bl	8000d84 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x6ea>
 800231e:	e001      	b.n	8002324 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3734      	adds	r7, #52	; 0x34
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e12d      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b98      	ldr	r3, [pc, #608]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d91b      	bls.n	800238a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b95      	ldr	r3, [pc, #596]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4993      	ldr	r1, [pc, #588]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002362:	f7fe fd0f 	bl	8000d84 <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002368:	e008      	b.n	800237c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800236a:	f7fe fd0b 	bl	8000d84 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e111      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237c:	4b8a      	ldr	r3, [pc, #552]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d1ef      	bne.n	800236a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fad5 	bl	800194a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023a0:	f7fe fcf0 	bl	8000d84 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023a8:	f7fe fcec 	bl	8000d84 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0f2      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023ba:	f7ff fbcf 	bl	8001b5c <LL_RCC_IsActiveFlag_HPRE>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f1      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d016      	beq.n	80023fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff facc 	bl	8001972 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023da:	f7fe fcd3 	bl	8000d84 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023e2:	f7fe fccf 	bl	8000d84 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0d5      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023f4:	f7ff fbc4 	bl	8001b80 <LL_RCC_IsActiveFlag_C2HPRE>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f1      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fac5 	bl	800199e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002414:	f7fe fcb6 	bl	8000d84 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800241c:	f7fe fcb2 	bl	8000d84 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b8      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800242e:	f7ff fbba 	bl	8001ba6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f1      	beq.n	800241c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fabf 	bl	80019cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800244e:	f7fe fc99 	bl	8000d84 <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002456:	f7fe fc95 	bl	8000d84 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e09b      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002468:	f7ff fbb0 	bl	8001bcc <LL_RCC_IsActiveFlag_PPRE1>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f1      	beq.n	8002456 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fab5 	bl	80019f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800248a:	f7fe fc7b 	bl	8000d84 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002492:	f7fe fc77 	bl	8000d84 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e07d      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024a4:	f7ff fba4 	bl	8001bf0 <LL_RCC_IsActiveFlag_PPRE2>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f1      	beq.n	8002492 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d043      	beq.n	8002542 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024c2:	f7ff f855 	bl	8001570 <LL_RCC_HSE_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11e      	bne.n	800250a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e067      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024d8:	f7ff fafd 	bl	8001ad6 <LL_RCC_PLL_IsReady>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d113      	bne.n	800250a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e05c      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024ee:	f7ff f9bd 	bl	800186c <LL_RCC_MSI_IsReady>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d108      	bne.n	800250a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e051      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024fc:	f7ff f868 	bl	80015d0 <LL_RCC_HSI_IsReady>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e04a      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f9fb 	bl	800190a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fc36 	bl	8000d84 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fc32 	bl	8000d84 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e036      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	f7ff f9fe 	bl	8001932 <LL_RCC_GetSysClkSource>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	429a      	cmp	r2, r3
 8002540:	d1ec      	bne.n	800251c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d21b      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4913      	ldr	r1, [pc, #76]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002560:	f7fe fc10 	bl	8000d84 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	e008      	b.n	800257a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002568:	f7fe fc0c 	bl	8000d84 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e012      	b.n	80025a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x278>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d1ef      	bne.n	8002568 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002588:	f000 f87e 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 800258c:	4603      	mov	r3, r0
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_RCC_ClockConfig+0x27c>)
 8002590:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002592:	f7fe fc03 	bl	8000d9c <HAL_GetTickPrio>
 8002596:	4603      	mov	r3, r0
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fac9 	bl	8000b30 <HAL_InitTick>
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58004000 	.word	0x58004000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	f7ff f9bc 	bl	8001932 <LL_RCC_GetSysClkSource>
 80025ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025c2:	f7ff f978 	bl	80018b6 <LL_RCC_MSI_GetRange>
 80025c6:	4603      	mov	r3, r0
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e04b      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e045      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d10a      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025ea:	f7fe ff91 	bl	8001510 <LL_RCC_HSE_IsEnabledDiv2>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e03a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e037      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002600:	f7ff faa0 	bl	8001b44 <LL_RCC_PLL_GetMainSource>
 8002604:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d003      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x64>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x6a>
 8002612:	e00d      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002616:	60bb      	str	r3, [r7, #8]
        break;
 8002618:	e015      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800261a:	f7fe ff79 	bl	8001510 <LL_RCC_HSE_IsEnabledDiv2>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002626:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002628:	e00d      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd4>)
 800262c:	60bb      	str	r3, [r7, #8]
        break;
 800262e:	e00a      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002630:	f7ff f941 	bl	80018b6 <LL_RCC_MSI_GetRange>
 8002634:	4603      	mov	r3, r0
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_RCC_GetSysClockFreq+0xcc>)
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	60bb      	str	r3, [r7, #8]
        break;
 8002644:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002646:	f7ff fa58 	bl	8001afa <LL_RCC_PLL_GetN>
 800264a:	4602      	mov	r2, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	fb03 f402 	mul.w	r4, r3, r2
 8002652:	f7ff fa6b 	bl	8001b2c <LL_RCC_PLL_GetDivider>
 8002656:	4603      	mov	r3, r0
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	3301      	adds	r3, #1
 800265c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002660:	f7ff fa58 	bl	8001b14 <LL_RCC_PLL_GetR>
 8002664:	4603      	mov	r3, r0
 8002666:	0f5b      	lsrs	r3, r3, #29
 8002668:	3301      	adds	r3, #1
 800266a:	fbb4 f3f3 	udiv	r3, r4, r3
 800266e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	08007454 	.word	0x08007454
 8002680:	00f42400 	.word	0x00f42400
 8002684:	01e84800 	.word	0x01e84800

08002688 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b598      	push	{r3, r4, r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800268c:	f7ff ff90 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8002690:	4604      	mov	r4, r0
 8002692:	f7ff f9c3 	bl	8001a1c <LL_RCC_GetAHBPrescaler>
 8002696:	4603      	mov	r3, r0
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_RCC_GetHCLKFreq+0x24>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd98      	pop	{r3, r4, r7, pc}
 80026ac:	080073f4 	.word	0x080073f4

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b598      	push	{r3, r4, r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b4:	f7ff ffe8 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026b8:	4604      	mov	r4, r0
 80026ba:	f7ff f9d6 	bl	8001a6a <LL_RCC_GetAPB1Prescaler>
 80026be:	4603      	mov	r3, r0
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd98      	pop	{r3, r4, r7, pc}
 80026d8:	08007434 	.word	0x08007434

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b598      	push	{r3, r4, r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026e0:	f7ff ffd2 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026e4:	4604      	mov	r4, r0
 80026e6:	f7ff f9cc 	bl	8001a82 <LL_RCC_GetAPB2Prescaler>
 80026ea:	4603      	mov	r3, r0
 80026ec:	0adb      	lsrs	r3, r3, #11
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd98      	pop	{r3, r4, r7, pc}
 8002704:	08007434 	.word	0x08007434

08002708 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	226f      	movs	r2, #111	; 0x6f
 8002716:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002718:	f7ff f90b 	bl	8001932 <LL_RCC_GetSysClkSource>
 800271c:	4602      	mov	r2, r0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002722:	f7ff f97b 	bl	8001a1c <LL_RCC_GetAHBPrescaler>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800272c:	f7ff f99d 	bl	8001a6a <LL_RCC_GetAPB1Prescaler>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002736:	f7ff f9a4 	bl	8001a82 <LL_RCC_GetAPB2Prescaler>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002740:	f7ff f978 	bl	8001a34 <LL_C2_RCC_GetAHBPrescaler>
 8002744:	4602      	mov	r2, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800274a:	f7ff f980 	bl	8001a4e <LL_RCC_GetAHB4Prescaler>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_GetClockConfig+0x60>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0207 	and.w	r2, r3, #7
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	58004000 	.word	0x58004000

0800276c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2bb0      	cmp	r3, #176	; 0xb0
 8002778:	d903      	bls.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e007      	b.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002792:	f7ff f95c 	bl	8001a4e <LL_RCC_GetAHB4Prescaler>
 8002796:	4603      	mov	r3, r0
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9c      	lsrs	r4, r3, #18
 80027b6:	f7fe fe9d 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4619      	mov	r1, r3
 80027be:	4620      	mov	r0, r4
 80027c0:	f000 f80c 	bl	80027dc <RCC_SetFlashLatency>
 80027c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	08007454 	.word	0x08007454
 80027d4:	080073f4 	.word	0x080073f4
 80027d8:	431bde83 	.word	0x431bde83

080027dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b093      	sub	sp, #76	; 0x4c
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <RCC_SetFlashLatency+0xe8>)
 80027e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80027f2:	4a35      	ldr	r2, [pc, #212]	; (80028c8 <RCC_SetFlashLatency+0xec>)
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80027fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027fe:	4b33      	ldr	r3, [pc, #204]	; (80028cc <RCC_SetFlashLatency+0xf0>)
 8002800:	f107 040c 	add.w	r4, r7, #12
 8002804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800280a:	2300      	movs	r3, #0
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d11a      	bne.n	800284c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002816:	2300      	movs	r3, #0
 8002818:	643b      	str	r3, [r7, #64]	; 0x40
 800281a:	e013      	b.n	8002844 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	3348      	adds	r3, #72	; 0x48
 8002822:	443b      	add	r3, r7
 8002824:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d807      	bhi.n	800283e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800282e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	443b      	add	r3, r7
 8002836:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800283c:	e020      	b.n	8002880 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800283e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002840:	3301      	adds	r3, #1
 8002842:	643b      	str	r3, [r7, #64]	; 0x40
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002846:	2b03      	cmp	r3, #3
 8002848:	d9e8      	bls.n	800281c <RCC_SetFlashLatency+0x40>
 800284a:	e019      	b.n	8002880 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800284c:	2300      	movs	r3, #0
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002850:	e013      	b.n	800287a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3348      	adds	r3, #72	; 0x48
 8002858:	443b      	add	r3, r7
 800285a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d807      	bhi.n	8002874 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3348      	adds	r3, #72	; 0x48
 800286a:	443b      	add	r3, r7
 800286c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002870:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002872:	e005      	b.n	8002880 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	3301      	adds	r3, #1
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287c:	2b02      	cmp	r3, #2
 800287e:	d9e8      	bls.n	8002852 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <RCC_SetFlashLatency+0xf4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 0207 	bic.w	r2, r3, #7
 8002888:	4911      	ldr	r1, [pc, #68]	; (80028d0 <RCC_SetFlashLatency+0xf4>)
 800288a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002890:	f7fe fa78 	bl	8000d84 <HAL_GetTick>
 8002894:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002896:	e008      	b.n	80028aa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002898:	f7fe fa74 	bl	8000d84 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e007      	b.n	80028ba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <RCC_SetFlashLatency+0xf4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1ef      	bne.n	8002898 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	374c      	adds	r7, #76	; 0x4c
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	08007348 	.word	0x08007348
 80028c8:	08007358 	.word	0x08007358
 80028cc:	08007364 	.word	0x08007364
 80028d0:	58004000 	.word	0x58004000

080028d4 <LL_RCC_LSE_IsEnabled>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <LL_RCC_LSE_IsEnabled+0x18>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <LL_RCC_LSE_IsEnabled+0x1a>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_RCC_LSE_IsReady>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d101      	bne.n	8002910 <LL_RCC_LSE_IsReady+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_RCC_LSE_IsReady+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_RCC_MSI_EnablePLLMode>:
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_RCC_SetRFWKPClockSource>:
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_RCC_SetSMPSClockSource>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4313      	orrs	r3, r2
 8002980:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_RCC_SetSMPSPrescaler>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_SetUSARTClockSource>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_SetLPUARTClockSource>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_SetI2CClockSource>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_SetLPTIMClockSource>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_RCC_SetSAIClockSource>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_RCC_SetRNGClockSource>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_RCC_SetCLK48ClockSource>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_SetUSBClockSource>:
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffe3 	bl	8002ad4 <LL_RCC_SetCLK48ClockSource>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <LL_RCC_SetADCClockSource>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_SetRTCClockSource>:
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_GetRTCClockSource>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_ForceBackupDomainReset>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_PLLSAI1_Enable>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_PLLSAI1_Disable>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_PLLSAI1_IsReady>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1a:	d101      	bne.n	8002c20 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002c34:	2300      	movs	r3, #0
 8002c36:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d034      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c50:	d021      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c56:	d81b      	bhi.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c5c:	d01d      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c62:	d815      	bhi.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6c:	d110      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c7e:	e00d      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f94d 	bl	8002f24 <RCCEx_PLLSAI1_ConfigNP>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	77fb      	strb	r3, [r7, #31]
        break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	7ffb      	ldrb	r3, [r7, #31]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fee8 	bl	8002a7c <LL_RCC_SetSAIClockSource>
 8002cac:	e001      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d046      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002cbe:	f7ff ff56 	bl	8002b6e <LL_RCC_GetRTCClockSource>
 8002cc2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d03c      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002cce:	f7fe fc01 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff30 	bl	8002b42 <LL_RCC_SetRTCClockSource>
 8002ce2:	e02e      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002cee:	f7ff ff4b 	bl	8002b88 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002cf2:	f7ff ff5a 	bl	8002baa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002d0e:	f7ff fde1 	bl	80028d4 <LL_RCC_LSE_IsEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d114      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d18:	f7fe f834 	bl	8000d84 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe f830 	bl	8000d84 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d902      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	77fb      	strb	r3, [r7, #31]
              break;
 8002d36:	e004      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d38:	f7ff fdde 	bl	80028f8 <LL_RCC_LSE_IsReady>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d1ee      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	77bb      	strb	r3, [r7, #30]
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fe2a 	bl	80029b6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fe35 	bl	80029e2 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fe5d 	bl	8002a48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe52 	bl	8002a48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe2a 	bl	8002a0e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe1f 	bl	8002a0e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe8d 	bl	8002b00 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dee:	d107      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f8e3 	bl	8002fda <RCCEx_PLLSAI1_ConfigNQ>
 8002e14:	4603      	mov	r3, r0
 8002e16:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02b      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e40:	d003      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fe2a 	bl	8002aa8 <LL_RCC_SetRNGClockSource>
 8002e54:	e00a      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff fe21 	bl	8002aa8 <LL_RCC_SetRNGClockSource>
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fe34 	bl	8002ad4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e74:	d107      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e84:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d022      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe3d 	bl	8002b16 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 f8e3 	bl	8003090 <RCCEx_PLLSAI1_ConfigNR>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002ed4:	7ffb      	ldrb	r3, [r7, #31]
 8002ed6:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fd26 	bl	800293a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fd45 	bl	800298e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fd2c 	bl	8002966 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002f0e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002f1c:	f7ff fcfe 	bl	800291c <LL_RCC_MSI_EnablePLLMode>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f30:	f7ff fe5b 	bl	8002bea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f34:	f7fd ff26 	bl	8000d84 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3c:	f7fd ff22 	bl	8000d84 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4e:	e004      	b.n	8002f5a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f50:	f7ff fe5a 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d137      	bne.n	8002fd0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f8e:	f7ff fe1d 	bl	8002bcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f92:	f7fd fef7 	bl	8000d84 <HAL_GetTick>
 8002f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f98:	e009      	b.n	8002fae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f9a:	f7fd fef3 	bl	8000d84 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d902      	bls.n	8002fae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	73fb      	strb	r3, [r7, #15]
        break;
 8002fac:	e004      	b.n	8002fb8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fae:	f7ff fe2b 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1f0      	bne.n	8002f9a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fe6:	f7ff fe00 	bl	8002bea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fea:	f7fd fecb 	bl	8000d84 <HAL_GetTick>
 8002fee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ff0:	e009      	b.n	8003006 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff2:	f7fd fec7 	bl	8000d84 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d902      	bls.n	8003006 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e004      	b.n	8003010 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003006:	f7ff fdff 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d137      	bne.n	8003086 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302a:	4313      	orrs	r3, r2
 800302c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003040:	4313      	orrs	r3, r2
 8003042:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003044:	f7ff fdc2 	bl	8002bcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fd fe9c 	bl	8000d84 <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800304e:	e009      	b.n	8003064 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003050:	f7fd fe98 	bl	8000d84 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	73fb      	strb	r3, [r7, #15]
        break;
 8003062:	e004      	b.n	800306e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003064:	f7ff fdd0 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d1f0      	bne.n	8003050 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d108      	bne.n	8003086 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003082:	4313      	orrs	r3, r2
 8003084:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800309c:	f7ff fda5 	bl	8002bea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030a0:	f7fd fe70 	bl	8000d84 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a8:	f7fd fe6c 	bl	8000d84 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
      break;
 80030ba:	e004      	b.n	80030c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030bc:	f7ff fda4 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d137      	bne.n	800313c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e0:	4313      	orrs	r3, r2
 80030e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030fa:	f7ff fd67 	bl	8002bcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fe:	f7fd fe41 	bl	8000d84 <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003104:	e009      	b.n	800311a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003106:	f7fd fe3d 	bl	8000d84 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	73fb      	strb	r3, [r7, #15]
        break;
 8003118:	e004      	b.n	8003124 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800311a:	f7ff fd75 	bl	8002c08 <LL_RCC_PLLSAI1_IsReady>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d1f0      	bne.n	8003106 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003138:	4313      	orrs	r3, r2
 800313a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e049      	b.n	80031ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f841 	bl	80031f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f000 f9d5 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d001      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e036      	b.n	800328e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_TIM_Base_Start_IT+0x94>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x44>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d115      	bne.n	8003278 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_TIM_Base_Start_IT+0x98>)
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b06      	cmp	r3, #6
 800325c:	d015      	beq.n	800328a <HAL_TIM_Base_Start_IT+0x82>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d011      	beq.n	800328a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	e008      	b.n	800328a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e000      	b.n	800328c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f905 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8f7 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f908 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d122      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d11b      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0204 	mvn.w	r2, #4
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8db 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8cd 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8de 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b08      	cmp	r3, #8
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0208 	mvn.w	r2, #8
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2204      	movs	r2, #4
 800337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8b1 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8a3 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8b4 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f887 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f879 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f88a 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0201 	mvn.w	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fa62 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8de 	bl	8003610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8d1 	bl	8003624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d10e      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f838 	bl	800351e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f891 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x20>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x52>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x52>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x52>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <TIM_Base_SetConfig+0xc4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <TIM_Base_SetConfig+0xbc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0xa0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <TIM_Base_SetConfig+0xc0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0xa0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <TIM_Base_SetConfig+0xc4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_RCC_GetUSARTClockSource>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003644:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4013      	ands	r3, r2
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_RCC_GetLPUARTClockSource>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4013      	ands	r3, r2
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e042      	b.n	8003710 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd f991 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2224      	movs	r2, #36	; 0x24
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8c2 	bl	8003844 <UART_SetConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fade 	bl	8003c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fb65 	bl	8003dd8 <UART_CheckIdleState>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	2b20      	cmp	r3, #32
 8003730:	f040 8083 	bne.w	800383a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_UART_Transmit+0x28>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e07b      	b.n	800383c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x3a>
 800374e:	2302      	movs	r3, #2
 8003750:	e074      	b.n	800383c <HAL_UART_Transmit+0x124>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	; 0x21
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fb0b 	bl	8000d84 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x84>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80037ac:	e02c      	b.n	8003808 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fb58 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e039      	b.n	800383c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3302      	adds	r3, #2
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e007      	b.n	80037f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1cc      	bne.n	80037ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb25 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e006      	b.n	800383c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b08c      	sub	sp, #48	; 0x30
 800384a:	af00      	add	r7, sp, #0
 800384c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4313      	orrs	r3, r2
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4baf      	ldr	r3, [pc, #700]	; (8003b30 <UART_SetConfig+0x2ec>)
 8003874:	4013      	ands	r3, r2
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4aa4      	ldr	r2, [pc, #656]	; (8003b34 <UART_SetConfig+0x2f0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ac:	4313      	orrs	r3, r2
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f023 010f 	bic.w	r1, r3, #15
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a95      	ldr	r2, [pc, #596]	; (8003b38 <UART_SetConfig+0x2f4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d125      	bne.n	8003934 <UART_SetConfig+0xf0>
 80038e8:	2003      	movs	r0, #3
 80038ea:	f7ff fea5 	bl	8003638 <LL_RCC_GetUSARTClockSource>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d81b      	bhi.n	800392c <UART_SetConfig+0xe8>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <UART_SetConfig+0xb8>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	0800391d 	.word	0x0800391d
 8003904:	08003915 	.word	0x08003915
 8003908:	08003925 	.word	0x08003925
 800390c:	2301      	movs	r3, #1
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003912:	e042      	b.n	800399a <UART_SetConfig+0x156>
 8003914:	2302      	movs	r3, #2
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391a:	e03e      	b.n	800399a <UART_SetConfig+0x156>
 800391c:	2304      	movs	r3, #4
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003922:	e03a      	b.n	800399a <UART_SetConfig+0x156>
 8003924:	2308      	movs	r3, #8
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800392a:	e036      	b.n	800399a <UART_SetConfig+0x156>
 800392c:	2310      	movs	r3, #16
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003932:	e032      	b.n	800399a <UART_SetConfig+0x156>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7e      	ldr	r2, [pc, #504]	; (8003b34 <UART_SetConfig+0x2f0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d12a      	bne.n	8003994 <UART_SetConfig+0x150>
 800393e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003942:	f7ff fe89 	bl	8003658 <LL_RCC_GetLPUARTClockSource>
 8003946:	4603      	mov	r3, r0
 8003948:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800394c:	d01a      	beq.n	8003984 <UART_SetConfig+0x140>
 800394e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003952:	d81b      	bhi.n	800398c <UART_SetConfig+0x148>
 8003954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003958:	d00c      	beq.n	8003974 <UART_SetConfig+0x130>
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d815      	bhi.n	800398c <UART_SetConfig+0x148>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x128>
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d008      	beq.n	800397c <UART_SetConfig+0x138>
 800396a:	e00f      	b.n	800398c <UART_SetConfig+0x148>
 800396c:	2300      	movs	r3, #0
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e012      	b.n	800399a <UART_SetConfig+0x156>
 8003974:	2302      	movs	r3, #2
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397a:	e00e      	b.n	800399a <UART_SetConfig+0x156>
 800397c:	2304      	movs	r3, #4
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003982:	e00a      	b.n	800399a <UART_SetConfig+0x156>
 8003984:	2308      	movs	r3, #8
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398a:	e006      	b.n	800399a <UART_SetConfig+0x156>
 800398c:	2310      	movs	r3, #16
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003992:	e002      	b.n	800399a <UART_SetConfig+0x156>
 8003994:	2310      	movs	r3, #16
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <UART_SetConfig+0x2f0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	f040 8097 	bne.w	8003ad4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d823      	bhi.n	80039f6 <UART_SetConfig+0x1b2>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0x170>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039e7 	.word	0x080039e7
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	080039f7 	.word	0x080039f7
 80039d0:	080039f7 	.word	0x080039f7
 80039d4:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe fe6a 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039de:	e010      	b.n	8003a02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <UART_SetConfig+0x2f8>)
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039e4:	e00d      	b.n	8003a02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe fde3 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039ec:	e009      	b.n	8003a02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039f4:	e005      	b.n	8003a02 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 812b 	beq.w	8003c60 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <UART_SetConfig+0x2fc>)
 8003a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d305      	bcc.n	8003a3a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d903      	bls.n	8003a42 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a40:	e10e      	b.n	8003c60 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	2200      	movs	r2, #0
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	60fa      	str	r2, [r7, #12]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <UART_SetConfig+0x2fc>)
 8003a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a64:	f7fc fb8c 	bl	8000180 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	020b      	lsls	r3, r1, #8
 8003a7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a7e:	0202      	lsls	r2, r0, #8
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	6849      	ldr	r1, [r1, #4]
 8003a84:	0849      	lsrs	r1, r1, #1
 8003a86:	2000      	movs	r0, #0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	eb12 0804 	adds.w	r8, r2, r4
 8003a90:	eb43 0905 	adc.w	r9, r3, r5
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	469a      	mov	sl, r3
 8003a9c:	4693      	mov	fp, r2
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	465b      	mov	r3, fp
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	f7fc fb6b 	bl	8000180 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4613      	mov	r3, r2
 8003ab0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d308      	bcc.n	8003acc <UART_SetConfig+0x288>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac0:	d204      	bcs.n	8003acc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e0c9      	b.n	8003c60 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ad2:	e0c5      	b.n	8003c60 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	d16e      	bne.n	8003bbc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d82d      	bhi.n	8003b44 <UART_SetConfig+0x300>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0x2ac>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b11 	.word	0x08003b11
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b45 	.word	0x08003b45
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7fe fde4 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b16:	e01b      	b.n	8003b50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <UART_SetConfig+0x2f8>)
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b1c:	e018      	b.n	8003b50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe fd47 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b24:	e014      	b.n	8003b50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b2c:	e010      	b.n	8003b50 <UART_SetConfig+0x30c>
 8003b2e:	bf00      	nop
 8003b30:	cfff69f3 	.word	0xcfff69f3
 8003b34:	40008000 	.word	0x40008000
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	08007494 	.word	0x08007494
      default:
        pclk = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8084 	beq.w	8003c60 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	4a4b      	ldr	r2, [pc, #300]	; (8003c8c <UART_SetConfig+0x448>)
 8003b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b6a:	005a      	lsls	r2, r3, #1
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	441a      	add	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d916      	bls.n	8003bb4 <UART_SetConfig+0x370>
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8c:	d212      	bcs.n	8003bb4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f023 030f 	bic.w	r3, r3, #15
 8003b96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	8bfb      	ldrh	r3, [r7, #30]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	8bfa      	ldrh	r2, [r7, #30]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	e055      	b.n	8003c60 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bba:	e051      	b.n	8003c60 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	2b07      	cmp	r3, #7
 8003bc4:	d821      	bhi.n	8003c0a <UART_SetConfig+0x3c6>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x388>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bed 	.word	0x08003bed
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003bfb 	.word	0x08003bfb
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c0b 	.word	0x08003c0b
 8003be8:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7fe fd76 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf2:	e010      	b.n	8003c16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <UART_SetConfig+0x44c>)
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bf8:	e00d      	b.n	8003c16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fcd9 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c00:	e009      	b.n	8003c16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c08:	e005      	b.n	8003c16 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c14:	bf00      	nop
    }

    if (pclk != 0U)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d021      	beq.n	8003c60 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <UART_SetConfig+0x448>)
 8003c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	441a      	add	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d908      	bls.n	8003c5a <UART_SetConfig+0x416>
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4e:	d204      	bcs.n	8003c5a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e002      	b.n	8003c60 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3730      	adds	r7, #48	; 0x30
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08007494 	.word	0x08007494
 8003c90:	00f42400 	.word	0x00f42400

08003c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01a      	beq.n	8003daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d10a      	bne.n	8003daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de8:	f7fc ffcc 	bl	8000d84 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d10e      	bne.n	8003e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f82f 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e025      	b.n	8003e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d10e      	bne.n	8003e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f819 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b09c      	sub	sp, #112	; 0x70
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	e0a9      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e86:	f000 80a5 	beq.w	8003fd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fc ff7b 	bl	8000d84 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d140      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e069      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d051      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3e:	d149      	bne.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f9c:	623a      	str	r2, [r7, #32]
 8003f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	69f9      	ldr	r1, [r7, #28]
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e010      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f43f af46 	beq.w	8003e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3770      	adds	r7, #112	; 0x70
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_UARTEx_DisableFifoMode+0x16>
 8004010:	2302      	movs	r3, #2
 8004012:	e027      	b.n	8004064 <HAL_UARTEx_DisableFifoMode+0x66>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e02d      	b.n	80040e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f84f 	bl	8004168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004100:	2302      	movs	r3, #2
 8004102:	e02d      	b.n	8004160 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f811 	bl	8004168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004188:	e031      	b.n	80041ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800418a:	2308      	movs	r3, #8
 800418c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800418e:	2308      	movs	r3, #8
 8004190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	0e5b      	lsrs	r3, r3, #25
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	0f5b      	lsrs	r3, r3, #29
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	7b3a      	ldrb	r2, [r7, #12]
 80041b6:	4911      	ldr	r1, [pc, #68]	; (80041fc <UARTEx_SetNbDataToProcess+0x94>)
 80041b8:	5c8a      	ldrb	r2, [r1, r2]
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041be:	7b3a      	ldrb	r2, [r7, #12]
 80041c0:	490f      	ldr	r1, [pc, #60]	; (8004200 <UARTEx_SetNbDataToProcess+0x98>)
 80041c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	7b7a      	ldrb	r2, [r7, #13]
 80041d4:	4909      	ldr	r1, [pc, #36]	; (80041fc <UARTEx_SetNbDataToProcess+0x94>)
 80041d6:	5c8a      	ldrb	r2, [r1, r2]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041dc:	7b7a      	ldrb	r2, [r7, #13]
 80041de:	4908      	ldr	r1, [pc, #32]	; (8004200 <UARTEx_SetNbDataToProcess+0x98>)
 80041e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	080074ac 	.word	0x080074ac
 8004200:	080074b4 	.word	0x080074b4

08004204 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800420c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004210:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	b29b      	uxth	r3, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	b29b      	uxth	r3, r3
 8004222:	4013      	ands	r3, r2
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800423a:	b084      	sub	sp, #16
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	f107 0014 	add.w	r0, r7, #20
 8004248:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	b004      	add	sp, #16
 800427a:	4770      	bx	lr

0800427c <__NVIC_SetPriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <SysTick_Handler+0x1c>)
 80042d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042d8:	f001 fde6 	bl	8005ea8 <xTaskGetSchedulerState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042e2:	f002 fc89 	bl	8006bf8 <xPortSysTickHandler>
  }
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	e000e010 	.word	0xe000e010

080042f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042f4:	2100      	movs	r1, #0
 80042f6:	f06f 0004 	mvn.w	r0, #4
 80042fa:	f7ff ffbf 	bl	800427c <__NVIC_SetPriority>
#endif
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430a:	f3ef 8305 	mrs	r3, IPSR
 800430e:	603b      	str	r3, [r7, #0]
  return(result);
 8004310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004316:	f06f 0305 	mvn.w	r3, #5
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	e00c      	b.n	8004338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <osKernelInitialize+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <osKernelInitialize+0x44>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800432c:	2300      	movs	r3, #0
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e002      	b.n	8004338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000478 	.word	0x20000478

0800434c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004352:	f3ef 8305 	mrs	r3, IPSR
 8004356:	603b      	str	r3, [r7, #0]
  return(result);
 8004358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <osKernelStart+0x1a>
    stat = osErrorISR;
 800435e:	f06f 0305 	mvn.w	r3, #5
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	e010      	b.n	8004388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <osKernelStart+0x48>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d109      	bne.n	8004382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800436e:	f7ff ffbf 	bl	80042f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <osKernelStart+0x48>)
 8004374:	2202      	movs	r2, #2
 8004376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004378:	f001 f93a 	bl	80055f0 <vTaskStartScheduler>
      stat = osOK;
 800437c:	2300      	movs	r3, #0
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	e002      	b.n	8004388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000478 	.word	0x20000478

08004398 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af04      	add	r7, sp, #16
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	617b      	str	r3, [r7, #20]
  return(result);
 80043ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d17e      	bne.n	80044b2 <osThreadNew+0x11a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d07b      	beq.n	80044b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043be:	2318      	movs	r3, #24
 80043c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d045      	beq.n	800445e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <osThreadNew+0x48>
        name = attr->name;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <osThreadNew+0x6e>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b38      	cmp	r3, #56	; 0x38
 80043f8:	d805      	bhi.n	8004406 <osThreadNew+0x6e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <osThreadNew+0x72>
        return (NULL);
 8004406:	2300      	movs	r3, #0
 8004408:	e054      	b.n	80044b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <osThreadNew+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2bbb      	cmp	r3, #187	; 0xbb
 8004428:	d90a      	bls.n	8004440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <osThreadNew+0xa8>
        mem = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e010      	b.n	8004462 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <osThreadNew+0xca>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <osThreadNew+0xca>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <osThreadNew+0xca>
          mem = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e001      	b.n	8004462 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d110      	bne.n	800448a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004470:	9202      	str	r2, [sp, #8]
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 feca 	bl	8005218 <xTaskCreateStatic>
 8004484:	4603      	mov	r3, r0
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e013      	b.n	80044b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d110      	bne.n	80044b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	b29a      	uxth	r2, r3
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 ff15 	bl	80052d2 <xTaskCreate>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <osThreadNew+0x11a>
            hTask = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044b2:	693b      	ldr	r3, [r7, #16]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c4:	f3ef 8305 	mrs	r3, IPSR
 80044c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <osDelay+0x1c>
    stat = osErrorISR;
 80044d0:	f06f 0305 	mvn.w	r3, #5
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e007      	b.n	80044e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 f850 	bl	8005588 <vTaskDelay>
    }
  }

  return (stat);
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f002 f99c 	bl	8006838 <pvTimerGetTimerID>
 8004500:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b08c      	sub	sp, #48	; 0x30
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	460b      	mov	r3, r1
 800452a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004530:	f3ef 8305 	mrs	r3, IPSR
 8004534:	613b      	str	r3, [r7, #16]
  return(result);
 8004536:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004538:	2b00      	cmp	r3, #0
 800453a:	d163      	bne.n	8004604 <osTimerNew+0xe8>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d060      	beq.n	8004604 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004542:	2008      	movs	r0, #8
 8004544:	f002 fbe8 	bl	8006d18 <pvPortMalloc>
 8004548:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d059      	beq.n	8004604 <osTimerNew+0xe8>
      callb->func = func;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e001      	b.n	800456c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004570:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01c      	beq.n	80045b6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <osTimerNew+0x6e>
          name = attr->name;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <osTimerNew+0x84>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b2b      	cmp	r3, #43	; 0x2b
 8004598:	d902      	bls.n	80045a0 <osTimerNew+0x84>
          mem = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00c      	b.n	80045ba <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <osTimerNew+0x9e>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <osTimerNew+0x9e>
            mem = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e001      	b.n	80045ba <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10c      	bne.n	80045da <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <osTimerNew+0xf4>)
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	2101      	movs	r1, #1
 80045d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045d2:	f001 fdb2 	bl	800613a <xTimerCreateStatic>
 80045d6:	6238      	str	r0, [r7, #32]
 80045d8:	e00b      	b.n	80045f2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <osTimerNew+0xf4>)
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	2101      	movs	r1, #1
 80045ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045ec:	f001 fd84 	bl	80060f8 <xTimerCreate>
 80045f0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <osTimerNew+0xe8>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <osTimerNew+0xe8>
        vPortFree (callb);
 80045fe:	6978      	ldr	r0, [r7, #20]
 8004600:	f002 fc56 	bl	8006eb0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004604:	6a3b      	ldr	r3, [r7, #32]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	080044f3 	.word	0x080044f3

08004614 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004622:	f3ef 8305 	mrs	r3, IPSR
 8004626:	60fb      	str	r3, [r7, #12]
  return(result);
 8004628:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <osTimerStart+0x22>
    stat = osErrorISR;
 800462e:	f06f 0305 	mvn.w	r3, #5
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e017      	b.n	8004666 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <osTimerStart+0x30>
    stat = osErrorParameter;
 800463c:	f06f 0303 	mvn.w	r3, #3
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e010      	b.n	8004666 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004644:	2300      	movs	r3, #0
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	2104      	movs	r1, #4
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f001 fdec 	bl	800622c <xTimerGenericCommand>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <osTimerStart+0x4c>
      stat = osOK;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e002      	b.n	8004666 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004660:	f06f 0302 	mvn.w	r3, #2
 8004664:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004666:	697b      	ldr	r3, [r7, #20]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <vApplicationGetIdleTaskMemory+0x2c>)
 8004680:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a06      	ldr	r2, [pc, #24]	; (80046a0 <vApplicationGetIdleTaskMemory+0x30>)
 8004686:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	601a      	str	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	2000047c 	.word	0x2000047c
 80046a0:	20000538 	.word	0x20000538

080046a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80046b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <vApplicationGetTimerTaskMemory+0x30>)
 80046ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000738 	.word	0x20000738
 80046d4:	200007f4 	.word	0x200007f4

080046d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f103 0208 	add.w	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f103 0208 	add.w	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f103 0208 	add.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004790:	d103      	bne.n	800479a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e00c      	b.n	80047b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3308      	adds	r3, #8
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e002      	b.n	80047a8 <vListInsert+0x2e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d2f6      	bcs.n	80047a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6852      	ldr	r2, [r2, #4]
 800480c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d103      	bne.n	8004820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800486a:	f002 f933 	bl	8006ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	441a      	add	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	3b01      	subs	r3, #1
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	441a      	add	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	22ff      	movs	r2, #255	; 0xff
 80048ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d114      	bne.n	80048ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01a      	beq.n	80048fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3310      	adds	r3, #16
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f929 	bl	8005b24 <xTaskRemoveFromEventList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <xQueueGenericReset+0xcc>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	e009      	b.n	80048fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3310      	adds	r3, #16
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fef2 	bl	80046d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff feed 	bl	80046d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048fe:	f002 f919 	bl	8006b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004902:	2301      	movs	r3, #1
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <xQueueGenericCreateStatic+0x52>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <xQueueGenericCreateStatic+0x56>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericCreateStatic+0x58>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <xQueueGenericCreateStatic+0x7e>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <xQueueGenericCreateStatic+0x82>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <xQueueGenericCreateStatic+0x84>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	61fb      	str	r3, [r7, #28]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ae:	2350      	movs	r3, #80	; 0x50
 80049b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b50      	cmp	r3, #80	; 0x50
 80049b6:	d00a      	beq.n	80049ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	61bb      	str	r3, [r7, #24]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f805 	bl	8004a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	; 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a2e:	2101      	movs	r1, #1
 8004a30:	69b8      	ldr	r0, [r7, #24]
 8004a32:	f7ff ff05 	bl	8004840 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	; 0x38
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xQueueGenericSend+0x32>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <xQueueGenericSend+0x40>
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <xQueueGenericSend+0x44>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueGenericSend+0x46>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xQueueGenericSend+0x60>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d103      	bne.n	8004ab6 <xQueueGenericSend+0x6e>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <xQueueGenericSend+0x72>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <xQueueGenericSend+0x74>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	623b      	str	r3, [r7, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad6:	f001 f9e7 	bl	8005ea8 <xTaskGetSchedulerState>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xQueueGenericSend+0x9e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <xQueueGenericSend+0xa2>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <xQueueGenericSend+0xa4>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xQueueGenericSend+0xbe>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	61fb      	str	r3, [r7, #28]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b06:	f001 ffe5 	bl	8006ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <xQueueGenericSend+0xd4>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d129      	bne.n	8004b70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b22:	f000 fa0b 	bl	8004f3c <prvCopyDataToQueue>
 8004b26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fff5 	bl	8005b24 <xTaskRemoveFromEventList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e00a      	b.n	8004b68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b58:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b68:	f001 ffe4 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e063      	b.n	8004c38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b76:	f001 ffdd 	bl	8006b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e05c      	b.n	8004c38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 f82f 	bl	8005bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b92:	f001 ffcf 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b96:	f000 fd9b 	bl	80056d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b9a:	f001 ff9b 	bl	8006ad4 <vPortEnterCritical>
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004baa:	d103      	bne.n	8004bb4 <xQueueGenericSend+0x16c>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x182>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bca:	f001 ffb3 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 f81e 	bl	8005c18 <xTaskCheckForTimeOut>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d124      	bne.n	8004c2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be4:	f000 faa2 	bl	800512c <prvIsQueueFull>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 ff44 	bl	8005a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 fa2d 	bl	800505c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c02:	f000 fd73 	bl	80056ec <xTaskResumeAll>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f af7c 	bne.w	8004b06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	e772      	b.n	8004b06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c22:	f000 fa1b 	bl	800505c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c26:	f000 fd61 	bl	80056ec <xTaskResumeAll>
 8004c2a:	e76c      	b.n	8004b06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2e:	f000 fa15 	bl	800505c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c32:	f000 fd5b 	bl	80056ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	; 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b090      	sub	sp, #64	; 0x40
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <xQueueGenericSendFromISR+0x3c>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <xQueueGenericSendFromISR+0x40>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <xQueueGenericSendFromISR+0x42>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d103      	bne.n	8004cae <xQueueGenericSendFromISR+0x6a>
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x6e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSendFromISR+0x70>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cce:	f001 ffe3 	bl	8006c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <xQueueGenericSendFromISR+0xbc>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d12f      	bne.n	8004d60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d16:	f000 f911 	bl	8004f3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d22:	d112      	bne.n	8004d4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d016      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	3324      	adds	r3, #36	; 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fef7 	bl	8005b24 <xTaskRemoveFromEventList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e007      	b.n	8004d5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	b25a      	sxtb	r2, r3
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d5e:	e001      	b.n	8004d64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3740      	adds	r7, #64	; 0x40
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xQueueReceive+0x30>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	623b      	str	r3, [r7, #32]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0x3e>
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xQueueReceive+0x42>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueReceive+0x44>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueReceive+0x5e>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61fb      	str	r3, [r7, #28]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dda:	f001 f865 	bl	8005ea8 <xTaskGetSchedulerState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <xQueueReceive+0x6e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueReceive+0x72>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueReceive+0x74>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xQueueReceive+0x8e>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61bb      	str	r3, [r7, #24]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e0a:	f001 fe63 	bl	8006ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01f      	beq.n	8004e5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1e:	f000 f8f7 	bl	8005010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00f      	beq.n	8004e52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	3310      	adds	r3, #16
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fe74 	bl	8005b24 <xTaskRemoveFromEventList>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e42:	4b3d      	ldr	r3, [pc, #244]	; (8004f38 <xQueueReceive+0x1bc>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e52:	f001 fe6f 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e069      	b.n	8004f2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e60:	f001 fe68 	bl	8006b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e062      	b.n	8004f2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6e:	f107 0310 	add.w	r3, r7, #16
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 feba 	bl	8005bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e7c:	f001 fe5a 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e80:	f000 fc26 	bl	80056d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e84:	f001 fe26 	bl	8006ad4 <vPortEnterCritical>
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e94:	d103      	bne.n	8004e9e <xQueueReceive+0x122>
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eaa:	d103      	bne.n	8004eb4 <xQueueReceive+0x138>
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb4:	f001 fe3e 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb8:	1d3a      	adds	r2, r7, #4
 8004eba:	f107 0310 	add.w	r3, r7, #16
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fea9 	bl	8005c18 <xTaskCheckForTimeOut>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d123      	bne.n	8004f14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 f917 	bl	8005100 <prvIsQueueEmpty>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fdcf 	bl	8005a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f8b8 	bl	800505c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eec:	f000 fbfe 	bl	80056ec <xTaskResumeAll>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d189      	bne.n	8004e0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <xQueueReceive+0x1bc>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e780      	b.n	8004e0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	f000 f8a7 	bl	800505c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f0e:	f000 fbed 	bl	80056ec <xTaskResumeAll>
 8004f12:	e77a      	b.n	8004e0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f16:	f000 f8a1 	bl	800505c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1a:	f000 fbe7 	bl	80056ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	f000 f8ee 	bl	8005100 <prvIsQueueEmpty>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f43f af6f 	beq.w	8004e0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3730      	adds	r7, #48	; 0x30
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d14d      	bne.n	8004ffe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 ffbc 	bl	8005ee4 <xTaskPriorityDisinherit>
 8004f6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	e043      	b.n	8004ffe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d119      	bne.n	8004fb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6858      	ldr	r0, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	461a      	mov	r2, r3
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	f002 f8d6 	bl	8007138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	441a      	add	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d32b      	bcc.n	8004ffe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	e026      	b.n	8004ffe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68d8      	ldr	r0, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	f002 f8bc 	bl	8007138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	425b      	negs	r3, r3
 8004fca:	441a      	add	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d207      	bcs.n	8004fec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d105      	bne.n	8004ffe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005006:	697b      	ldr	r3, [r7, #20]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	d303      	bcc.n	8005044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68d9      	ldr	r1, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	461a      	mov	r2, r3
 800504e:	6838      	ldr	r0, [r7, #0]
 8005050:	f002 f872 	bl	8007138 <memcpy>
	}
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005064:	f001 fd36 	bl	8006ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005070:	e011      	b.n	8005096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd50 	bl	8005b24 <xTaskRemoveFromEventList>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800508a:	f000 fe27 	bl	8005cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3b01      	subs	r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dce9      	bgt.n	8005072 <prvUnlockQueue+0x16>
 800509e:	e000      	b.n	80050a2 <prvUnlockQueue+0x46>
					break;
 80050a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050aa:	f001 fd43 	bl	8006b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050ae:	f001 fd11 	bl	8006ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ba:	e011      	b.n	80050e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d012      	beq.n	80050ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd2b 	bl	8005b24 <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050d4:	f000 fe02 	bl	8005cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	3b01      	subs	r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dce9      	bgt.n	80050bc <prvUnlockQueue+0x60>
 80050e8:	e000      	b.n	80050ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050f4:	f001 fd1e 	bl	8006b34 <vPortExitCritical>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005108:	f001 fce4 	bl	8006ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e001      	b.n	800511e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800511e:	f001 fd09 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005134:	f001 fcce 	bl	8006ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	429a      	cmp	r2, r3
 8005142:	d102      	bne.n	800514a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e001      	b.n	800514e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f001 fcf1 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e014      	b.n	8005196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <vQueueAddToRegistry+0x50>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005178:	490c      	ldr	r1, [pc, #48]	; (80051ac <vQueueAddToRegistry+0x50>)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <vQueueAddToRegistry+0x50>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800518e:	e006      	b.n	800519e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b07      	cmp	r3, #7
 800519a:	d9e7      	bls.n	800516c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000bf4 	.word	0x20000bf4

080051b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051c0:	f001 fc88 	bl	8006ad4 <vPortEnterCritical>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d0:	d103      	bne.n	80051da <vQueueWaitForMessageRestricted+0x2a>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d103      	bne.n	80051f0 <vQueueWaitForMessageRestricted+0x40>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	f001 fca0 	bl	8006b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc61 	bl	8005acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800520a:	6978      	ldr	r0, [r7, #20]
 800520c:	f7ff ff26 	bl	800505c <prvUnlockQueue>
	}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af04      	add	r7, sp, #16
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	623b      	str	r3, [r7, #32]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xTaskCreateStatic+0x46>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800525e:	23bc      	movs	r3, #188	; 0xbc
 8005260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2bbc      	cmp	r3, #188	; 0xbc
 8005266:	d00a      	beq.n	800527e <xTaskCreateStatic+0x66>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800527e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01e      	beq.n	80052c4 <xTaskCreateStatic+0xac>
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2202      	movs	r2, #2
 800529a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800529e:	2300      	movs	r3, #0
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	f107 0314 	add.w	r3, r7, #20
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f850 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052be:	f000 f8f3 	bl	80054a8 <prvAddNewTaskToReadyList>
 80052c2:	e001      	b.n	80052c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
	}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3728      	adds	r7, #40	; 0x28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08c      	sub	sp, #48	; 0x30
 80052d6:	af04      	add	r7, sp, #16
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fd16 	bl	8006d18 <pvPortMalloc>
 80052ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052f4:	20bc      	movs	r0, #188	; 0xbc
 80052f6:	f001 fd0f 	bl	8006d18 <pvPortMalloc>
 80052fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
 8005308:	e005      	b.n	8005316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f001 fdd0 	bl	8006eb0 <vPortFree>
 8005310:	e001      	b.n	8005316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005324:	88fa      	ldrh	r2, [r7, #6]
 8005326:	2300      	movs	r3, #0
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f80e 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005340:	69f8      	ldr	r0, [r7, #28]
 8005342:	f000 f8b1 	bl	80054a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005346:	2301      	movs	r3, #1
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e002      	b.n	8005352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800534c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005352:	69bb      	ldr	r3, [r7, #24]
	}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	461a      	mov	r2, r3
 8005374:	21a5      	movs	r1, #165	; 0xa5
 8005376:	f001 feed 	bl	8007154 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005384:	3b01      	subs	r3, #1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	617b      	str	r3, [r7, #20]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01f      	beq.n	80053fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e012      	b.n	80053e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	7819      	ldrb	r1, [r3, #0]
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	3334      	adds	r3, #52	; 0x34
 80053d0:	460a      	mov	r2, r1
 80053d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d9e9      	bls.n	80053c0 <prvInitialiseNewTask+0x64>
 80053ec:	e000      	b.n	80053f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80053ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	e003      	b.n	8005402 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	2b37      	cmp	r3, #55	; 0x37
 8005406:	d901      	bls.n	800540c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005408:	2337      	movs	r3, #55	; 0x37
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	2200      	movs	r2, #0
 800541c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff f978 	bl	8004718 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	3318      	adds	r3, #24
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff f973 	bl	8004718 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	2200      	movs	r2, #0
 8005454:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	3354      	adds	r3, #84	; 0x54
 800545c:	2260      	movs	r2, #96	; 0x60
 800545e:	2100      	movs	r1, #0
 8005460:	4618      	mov	r0, r3
 8005462:	f001 fe77 	bl	8007154 <memset>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	4a0c      	ldr	r2, [pc, #48]	; (800549c <prvInitialiseNewTask+0x140>)
 800546a:	659a      	str	r2, [r3, #88]	; 0x58
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <prvInitialiseNewTask+0x144>)
 8005470:	65da      	str	r2, [r3, #92]	; 0x5c
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	4a0b      	ldr	r2, [pc, #44]	; (80054a4 <prvInitialiseNewTask+0x148>)
 8005476:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	69b8      	ldr	r0, [r7, #24]
 800547e:	f001 f9fb 	bl	8006878 <pxPortInitialiseStack>
 8005482:	4602      	mov	r2, r0
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005492:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	080074dc 	.word	0x080074dc
 80054a0:	080074fc 	.word	0x080074fc
 80054a4:	080074bc 	.word	0x080074bc

080054a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054b0:	f001 fb10 	bl	8006ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054b4:	4b2d      	ldr	r3, [pc, #180]	; (800556c <prvAddNewTaskToReadyList+0xc4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	4a2c      	ldr	r2, [pc, #176]	; (800556c <prvAddNewTaskToReadyList+0xc4>)
 80054bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054be:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <prvAddNewTaskToReadyList+0xc8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054c6:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054cc:	4b27      	ldr	r3, [pc, #156]	; (800556c <prvAddNewTaskToReadyList+0xc4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d110      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054d4:	f000 fc26 	bl	8005d24 <prvInitialiseTaskLists>
 80054d8:	e00d      	b.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054da:	4b26      	ldr	r3, [pc, #152]	; (8005574 <prvAddNewTaskToReadyList+0xcc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054e2:	4b23      	ldr	r3, [pc, #140]	; (8005570 <prvAddNewTaskToReadyList+0xc8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d802      	bhi.n	80054f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <prvAddNewTaskToReadyList+0xc8>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <prvAddNewTaskToReadyList+0xd0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <prvAddNewTaskToReadyList+0xd0>)
 80054fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <prvAddNewTaskToReadyList+0xd0>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <prvAddNewTaskToReadyList+0xd4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d903      	bls.n	800551c <prvAddNewTaskToReadyList+0x74>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <prvAddNewTaskToReadyList+0xd4>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4a15      	ldr	r2, [pc, #84]	; (8005580 <prvAddNewTaskToReadyList+0xd8>)
 800552a:	441a      	add	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7ff f8fd 	bl	8004732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005538:	f001 fafc 	bl	8006b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <prvAddNewTaskToReadyList+0xcc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <prvAddNewTaskToReadyList+0xc8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	429a      	cmp	r2, r3
 8005550:	d207      	bcs.n	8005562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <prvAddNewTaskToReadyList+0xdc>)
 8005554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20001108 	.word	0x20001108
 8005570:	20000c34 	.word	0x20000c34
 8005574:	20001114 	.word	0x20001114
 8005578:	20001124 	.word	0x20001124
 800557c:	20001110 	.word	0x20001110
 8005580:	20000c38 	.word	0x20000c38
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d017      	beq.n	80055ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <vTaskDelay+0x60>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <vTaskDelay+0x30>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60bb      	str	r3, [r7, #8]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055b8:	f000 f88a 	bl	80056d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055bc:	2100      	movs	r1, #0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fcfe 	bl	8005fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055c4:	f000 f892 	bl	80056ec <xTaskResumeAll>
 80055c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <vTaskDelay+0x64>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20001130 	.word	0x20001130
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055fe:	463a      	mov	r2, r7
 8005600:	1d39      	adds	r1, r7, #4
 8005602:	f107 0308 	add.w	r3, r7, #8
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff f832 	bl	8004670 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	9202      	str	r2, [sp, #8]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	460a      	mov	r2, r1
 800561e:	4924      	ldr	r1, [pc, #144]	; (80056b0 <vTaskStartScheduler+0xc0>)
 8005620:	4824      	ldr	r0, [pc, #144]	; (80056b4 <vTaskStartScheduler+0xc4>)
 8005622:	f7ff fdf9 	bl	8005218 <xTaskCreateStatic>
 8005626:	4603      	mov	r3, r0
 8005628:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <vTaskStartScheduler+0xc8>)
 800562a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800562c:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <vTaskStartScheduler+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e001      	b.n	800563e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005644:	f000 fd10 	bl	8006068 <xTimerCreateTimerTask>
 8005648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d11b      	bne.n	8005688 <vTaskStartScheduler+0x98>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
}
 8005662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <vTaskStartScheduler+0xcc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3354      	adds	r3, #84	; 0x54
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <vTaskStartScheduler+0xd0>)
 800566c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <vTaskStartScheduler+0xd4>)
 8005670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <vTaskStartScheduler+0xd8>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <vTaskStartScheduler+0xdc>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005682:	f001 f985 	bl	8006990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005686:	e00e      	b.n	80056a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568e:	d10a      	bne.n	80056a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <vTaskStartScheduler+0xb4>
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	08007374 	.word	0x08007374
 80056b4:	08005cf5 	.word	0x08005cf5
 80056b8:	2000112c 	.word	0x2000112c
 80056bc:	20000c34 	.word	0x20000c34
 80056c0:	20000014 	.word	0x20000014
 80056c4:	20001128 	.word	0x20001128
 80056c8:	20001114 	.word	0x20001114
 80056cc:	2000110c 	.word	0x2000110c

080056d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <vTaskSuspendAll+0x18>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	4a03      	ldr	r2, [pc, #12]	; (80056e8 <vTaskSuspendAll+0x18>)
 80056dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056de:	bf00      	nop
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20001130 	.word	0x20001130

080056ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056fa:	4b42      	ldr	r3, [pc, #264]	; (8005804 <xTaskResumeAll+0x118>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <xTaskResumeAll+0x2c>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	603b      	str	r3, [r7, #0]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005718:	f001 f9dc 	bl	8006ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <xTaskResumeAll+0x118>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	4a38      	ldr	r2, [pc, #224]	; (8005804 <xTaskResumeAll+0x118>)
 8005724:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005726:	4b37      	ldr	r3, [pc, #220]	; (8005804 <xTaskResumeAll+0x118>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d162      	bne.n	80057f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800572e:	4b36      	ldr	r3, [pc, #216]	; (8005808 <xTaskResumeAll+0x11c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d05e      	beq.n	80057f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005736:	e02f      	b.n	8005798 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005738:	4b34      	ldr	r3, [pc, #208]	; (800580c <xTaskResumeAll+0x120>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3318      	adds	r3, #24
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff f851 	bl	80047ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3304      	adds	r3, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f84c 	bl	80047ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <xTaskResumeAll+0x124>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d903      	bls.n	8005768 <xTaskResumeAll+0x7c>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <xTaskResumeAll+0x124>)
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <xTaskResumeAll+0x128>)
 8005776:	441a      	add	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f7fe ffd7 	bl	8004732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <xTaskResumeAll+0x12c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <xTaskResumeAll+0x130>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005798:	4b1c      	ldr	r3, [pc, #112]	; (800580c <xTaskResumeAll+0x120>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1cb      	bne.n	8005738 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057a6:	f000 fb5f 	bl	8005e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057aa:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <xTaskResumeAll+0x134>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057b6:	f000 f847 	bl	8005848 <xTaskIncrementTick>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057c0:	4b16      	ldr	r3, [pc, #88]	; (800581c <xTaskResumeAll+0x130>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f1      	bne.n	80057b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <xTaskResumeAll+0x134>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057d8:	4b10      	ldr	r3, [pc, #64]	; (800581c <xTaskResumeAll+0x130>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <xTaskResumeAll+0x138>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057f4:	f001 f99e 	bl	8006b34 <vPortExitCritical>

	return xAlreadyYielded;
 80057f8:	68bb      	ldr	r3, [r7, #8]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20001130 	.word	0x20001130
 8005808:	20001108 	.word	0x20001108
 800580c:	200010c8 	.word	0x200010c8
 8005810:	20001110 	.word	0x20001110
 8005814:	20000c38 	.word	0x20000c38
 8005818:	20000c34 	.word	0x20000c34
 800581c:	2000111c 	.word	0x2000111c
 8005820:	20001118 	.word	0x20001118
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <xTaskGetTickCount+0x1c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005834:	687b      	ldr	r3, [r7, #4]
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000110c 	.word	0x2000110c

08005848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005852:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <xTaskIncrementTick+0x148>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 808f 	bne.w	800597a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800585c:	4b4d      	ldr	r3, [pc, #308]	; (8005994 <xTaskIncrementTick+0x14c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005864:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <xTaskIncrementTick+0x14c>)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d120      	bne.n	80058b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005870:	4b49      	ldr	r3, [pc, #292]	; (8005998 <xTaskIncrementTick+0x150>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <xTaskIncrementTick+0x48>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	603b      	str	r3, [r7, #0]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xTaskIncrementTick+0x46>
 8005890:	4b41      	ldr	r3, [pc, #260]	; (8005998 <xTaskIncrementTick+0x150>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b41      	ldr	r3, [pc, #260]	; (800599c <xTaskIncrementTick+0x154>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <xTaskIncrementTick+0x150>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4a3f      	ldr	r2, [pc, #252]	; (800599c <xTaskIncrementTick+0x154>)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <xTaskIncrementTick+0x158>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a3d      	ldr	r2, [pc, #244]	; (80059a0 <xTaskIncrementTick+0x158>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	f000 fadb 	bl	8005e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058b2:	4b3c      	ldr	r3, [pc, #240]	; (80059a4 <xTaskIncrementTick+0x15c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d349      	bcc.n	8005950 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058bc:	4b36      	ldr	r3, [pc, #216]	; (8005998 <xTaskIncrementTick+0x150>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <xTaskIncrementTick+0x15c>)
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058cc:	601a      	str	r2, [r3, #0]
					break;
 80058ce:	e03f      	b.n	8005950 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d0:	4b31      	ldr	r3, [pc, #196]	; (8005998 <xTaskIncrementTick+0x150>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d203      	bcs.n	80058f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058e8:	4a2e      	ldr	r2, [pc, #184]	; (80059a4 <xTaskIncrementTick+0x15c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058ee:	e02f      	b.n	8005950 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe ff79 	bl	80047ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	3318      	adds	r3, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe ff70 	bl	80047ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <xTaskIncrementTick+0x160>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d903      	bls.n	8005920 <xTaskIncrementTick+0xd8>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <xTaskIncrementTick+0x160>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <xTaskIncrementTick+0x164>)
 800592e:	441a      	add	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	3304      	adds	r3, #4
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7fe fefb 	bl	8004732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <xTaskIncrementTick+0x168>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	429a      	cmp	r2, r3
 8005948:	d3b8      	bcc.n	80058bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594e:	e7b5      	b.n	80058bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <xTaskIncrementTick+0x168>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4915      	ldr	r1, [pc, #84]	; (80059ac <xTaskIncrementTick+0x164>)
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d901      	bls.n	800596c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <xTaskIncrementTick+0x16c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e004      	b.n	8005984 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <xTaskIncrementTick+0x170>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <xTaskIncrementTick+0x170>)
 8005982:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005984:	697b      	ldr	r3, [r7, #20]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20001130 	.word	0x20001130
 8005994:	2000110c 	.word	0x2000110c
 8005998:	200010c0 	.word	0x200010c0
 800599c:	200010c4 	.word	0x200010c4
 80059a0:	20001120 	.word	0x20001120
 80059a4:	20001128 	.word	0x20001128
 80059a8:	20001110 	.word	0x20001110
 80059ac:	20000c38 	.word	0x20000c38
 80059b0:	20000c34 	.word	0x20000c34
 80059b4:	2000111c 	.word	0x2000111c
 80059b8:	20001118 	.word	0x20001118

080059bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <vTaskSwitchContext+0xb0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059ca:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <vTaskSwitchContext+0xb4>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059d0:	e046      	b.n	8005a60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80059d2:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <vTaskSwitchContext+0xb4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d8:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <vTaskSwitchContext+0xb8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e010      	b.n	8005a02 <vTaskSwitchContext+0x46>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <vTaskSwitchContext+0x40>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	607b      	str	r3, [r7, #4]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <vTaskSwitchContext+0x3e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	491d      	ldr	r1, [pc, #116]	; (8005a78 <vTaskSwitchContext+0xbc>)
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0e4      	beq.n	80059e0 <vTaskSwitchContext+0x24>
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <vTaskSwitchContext+0xbc>)
 8005a22:	4413      	add	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3308      	adds	r3, #8
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d104      	bne.n	8005a46 <vTaskSwitchContext+0x8a>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a0b      	ldr	r2, [pc, #44]	; (8005a7c <vTaskSwitchContext+0xc0>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <vTaskSwitchContext+0xb8>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <vTaskSwitchContext+0xc0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3354      	adds	r3, #84	; 0x54
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <vTaskSwitchContext+0xc4>)
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20001130 	.word	0x20001130
 8005a70:	2000111c 	.word	0x2000111c
 8005a74:	20001110 	.word	0x20001110
 8005a78:	20000c38 	.word	0x20000c38
 8005a7c:	20000c34 	.word	0x20000c34
 8005a80:	20000014 	.word	0x20000014

08005a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60fb      	str	r3, [r7, #12]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <vTaskPlaceOnEventList+0x44>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3318      	adds	r3, #24
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fe fe61 	bl	800477a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6838      	ldr	r0, [r7, #0]
 8005abc:	f000 fa80 	bl	8005fc0 <prvAddCurrentTaskToDelayedList>
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000c34 	.word	0x20000c34

08005acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	617b      	str	r3, [r7, #20]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3318      	adds	r3, #24
 8005afa:	4619      	mov	r1, r3
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7fe fe18 	bl	8004732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	68b8      	ldr	r0, [r7, #8]
 8005b12:	f000 fa55 	bl	8005fc0 <prvAddCurrentTaskToDelayedList>
	}
 8005b16:	bf00      	nop
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000c34 	.word	0x20000c34

08005b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60fb      	str	r3, [r7, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	3318      	adds	r3, #24
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fe49 	bl	80047ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <xTaskRemoveFromEventList+0xb0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11d      	bne.n	8005b9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fe40 	bl	80047ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <xTaskRemoveFromEventList+0xb4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d903      	bls.n	8005b80 <xTaskRemoveFromEventList+0x5c>
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <xTaskRemoveFromEventList+0xb4>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <xTaskRemoveFromEventList+0xb8>)
 8005b8e:	441a      	add	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fdcb 	bl	8004732 <vListInsertEnd>
 8005b9c:	e005      	b.n	8005baa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3318      	adds	r3, #24
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	480e      	ldr	r0, [pc, #56]	; (8005be0 <xTaskRemoveFromEventList+0xbc>)
 8005ba6:	f7fe fdc4 	bl	8004732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <xTaskRemoveFromEventList+0xc0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d905      	bls.n	8005bc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <xTaskRemoveFromEventList+0xc4>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e001      	b.n	8005bc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bc8:	697b      	ldr	r3, [r7, #20]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20001130 	.word	0x20001130
 8005bd8:	20001110 	.word	0x20001110
 8005bdc:	20000c38 	.word	0x20000c38
 8005be0:	200010c8 	.word	0x200010c8
 8005be4:	20000c34 	.word	0x20000c34
 8005be8:	2000111c 	.word	0x2000111c

08005bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <vTaskInternalSetTimeOutState+0x24>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <vTaskInternalSetTimeOutState+0x28>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20001120 	.word	0x20001120
 8005c14:	2000110c 	.word	0x2000110c

08005c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	613b      	str	r3, [r7, #16]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c5a:	f000 ff3b 	bl	8006ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <xTaskCheckForTimeOut+0xbc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c76:	d102      	bne.n	8005c7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e023      	b.n	8005cc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <xTaskCheckForTimeOut+0xc0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d007      	beq.n	8005c9a <xTaskCheckForTimeOut+0x82>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	e015      	b.n	8005cc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d20b      	bcs.n	8005cbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ff9b 	bl	8005bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e004      	b.n	8005cc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f000 ff35 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8005cca:	69fb      	ldr	r3, [r7, #28]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	2000110c 	.word	0x2000110c
 8005cd8:	20001120 	.word	0x20001120

08005cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <vTaskMissedYield+0x14>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	2000111c 	.word	0x2000111c

08005cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cfc:	f000 f852 	bl	8005da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvIdleTask+0x28>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d9f9      	bls.n	8005cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <prvIdleTask+0x2c>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d18:	e7f0      	b.n	8005cfc <prvIdleTask+0x8>
 8005d1a:	bf00      	nop
 8005d1c:	20000c38 	.word	0x20000c38
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	e00c      	b.n	8005d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <prvInitialiseTaskLists+0x60>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fcca 	bl	80046d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3301      	adds	r3, #1
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b37      	cmp	r3, #55	; 0x37
 8005d4e:	d9ef      	bls.n	8005d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d50:	480d      	ldr	r0, [pc, #52]	; (8005d88 <prvInitialiseTaskLists+0x64>)
 8005d52:	f7fe fcc1 	bl	80046d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d56:	480d      	ldr	r0, [pc, #52]	; (8005d8c <prvInitialiseTaskLists+0x68>)
 8005d58:	f7fe fcbe 	bl	80046d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d5c:	480c      	ldr	r0, [pc, #48]	; (8005d90 <prvInitialiseTaskLists+0x6c>)
 8005d5e:	f7fe fcbb 	bl	80046d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d62:	480c      	ldr	r0, [pc, #48]	; (8005d94 <prvInitialiseTaskLists+0x70>)
 8005d64:	f7fe fcb8 	bl	80046d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d68:	480b      	ldr	r0, [pc, #44]	; (8005d98 <prvInitialiseTaskLists+0x74>)
 8005d6a:	f7fe fcb5 	bl	80046d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <prvInitialiseTaskLists+0x78>)
 8005d70:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <prvInitialiseTaskLists+0x64>)
 8005d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <prvInitialiseTaskLists+0x7c>)
 8005d76:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <prvInitialiseTaskLists+0x68>)
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000c38 	.word	0x20000c38
 8005d88:	20001098 	.word	0x20001098
 8005d8c:	200010ac 	.word	0x200010ac
 8005d90:	200010c8 	.word	0x200010c8
 8005d94:	200010dc 	.word	0x200010dc
 8005d98:	200010f4 	.word	0x200010f4
 8005d9c:	200010c0 	.word	0x200010c0
 8005da0:	200010c4 	.word	0x200010c4

08005da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005daa:	e019      	b.n	8005de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dac:	f000 fe92 	bl	8006ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <prvCheckTasksWaitingTermination+0x50>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fd15 	bl	80047ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <prvCheckTasksWaitingTermination+0x54>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <prvCheckTasksWaitingTermination+0x54>)
 8005dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <prvCheckTasksWaitingTermination+0x58>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <prvCheckTasksWaitingTermination+0x58>)
 8005dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dd6:	f000 fead 	bl	8006b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f810 	bl	8005e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <prvCheckTasksWaitingTermination+0x58>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e1      	bne.n	8005dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200010dc 	.word	0x200010dc
 8005df8:	20001108 	.word	0x20001108
 8005dfc:	200010f0 	.word	0x200010f0

08005e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3354      	adds	r3, #84	; 0x54
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f9b7 	bl	8007180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d108      	bne.n	8005e2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f845 	bl	8006eb0 <vPortFree>
				vPortFree( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 f842 	bl	8006eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e2c:	e018      	b.n	8005e60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d103      	bne.n	8005e40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 f839 	bl	8006eb0 <vPortFree>
	}
 8005e3e:	e00f      	b.n	8005e60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d00a      	beq.n	8005e60 <prvDeleteTCB+0x60>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	60fb      	str	r3, [r7, #12]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <prvDeleteTCB+0x5e>
	}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <prvResetNextTaskUnblockTime+0x38>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e80:	e008      	b.n	8005e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <prvResetNextTaskUnblockTime+0x38>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200010c0 	.word	0x200010c0
 8005ea4:	20001128 	.word	0x20001128

08005ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <xTaskGetSchedulerState+0x34>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	e008      	b.n	8005ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebc:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <xTaskGetSchedulerState+0x38>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e001      	b.n	8005ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ece:	687b      	ldr	r3, [r7, #4]
	}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20001114 	.word	0x20001114
 8005ee0:	20001130 	.word	0x20001130

08005ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d056      	beq.n	8005fa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <xTaskPriorityDisinherit+0xd0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d00a      	beq.n	8005f1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d02c      	beq.n	8005fa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d128      	bne.n	8005fa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fc46 	bl	80047ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <xTaskPriorityDisinherit+0xd4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <xTaskPriorityDisinherit+0xa4>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4a0c      	ldr	r2, [pc, #48]	; (8005fb8 <xTaskPriorityDisinherit+0xd4>)
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <xTaskPriorityDisinherit+0xd8>)
 8005f96:	441a      	add	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe fbc7 	bl	8004732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fa8:	697b      	ldr	r3, [r7, #20]
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000c34 	.word	0x20000c34
 8005fb8:	20001110 	.word	0x20001110
 8005fbc:	20000c38 	.word	0x20000c38

08005fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd0:	4b20      	ldr	r3, [pc, #128]	; (8006054 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fc08 	bl	80047ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe2:	d10a      	bne.n	8005ffa <prvAddCurrentTaskToDelayedList+0x3a>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4819      	ldr	r0, [pc, #100]	; (8006058 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ff4:	f7fe fb9d 	bl	8004732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ff8:	e026      	b.n	8006048 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <prvAddCurrentTaskToDelayedList+0x94>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	429a      	cmp	r2, r3
 8006010:	d209      	bcs.n	8006026 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <prvAddCurrentTaskToDelayedList+0x94>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe fbab 	bl	800477a <vListInsert>
}
 8006024:	e010      	b.n	8006048 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006026:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <prvAddCurrentTaskToDelayedList+0x94>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7fe fba1 	bl	800477a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <prvAddCurrentTaskToDelayedList+0xa4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	d202      	bcs.n	8006048 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	6013      	str	r3, [r2, #0]
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	2000110c 	.word	0x2000110c
 8006054:	20000c34 	.word	0x20000c34
 8006058:	200010f4 	.word	0x200010f4
 800605c:	200010c4 	.word	0x200010c4
 8006060:	200010c0 	.word	0x200010c0
 8006064:	20001128 	.word	0x20001128

08006068 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006072:	f000 fba1 	bl	80067b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006076:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <xTimerCreateTimerTask+0x80>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d021      	beq.n	80060c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006086:	1d3a      	adds	r2, r7, #4
 8006088:	f107 0108 	add.w	r1, r7, #8
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fb07 	bl	80046a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	9202      	str	r2, [sp, #8]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	2302      	movs	r3, #2
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	460a      	mov	r2, r1
 80060a8:	4910      	ldr	r1, [pc, #64]	; (80060ec <xTimerCreateTimerTask+0x84>)
 80060aa:	4811      	ldr	r0, [pc, #68]	; (80060f0 <xTimerCreateTimerTask+0x88>)
 80060ac:	f7ff f8b4 	bl	8005218 <xTaskCreateStatic>
 80060b0:	4603      	mov	r3, r0
 80060b2:	4a10      	ldr	r2, [pc, #64]	; (80060f4 <xTimerCreateTimerTask+0x8c>)
 80060b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <xTimerCreateTimerTask+0x8c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060be:	2301      	movs	r3, #1
 80060c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	613b      	str	r3, [r7, #16]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060de:	697b      	ldr	r3, [r7, #20]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20001164 	.word	0x20001164
 80060ec:	0800737c 	.word	0x0800737c
 80060f0:	08006361 	.word	0x08006361
 80060f4:	20001168 	.word	0x20001168

080060f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006106:	202c      	movs	r0, #44	; 0x2c
 8006108:	f000 fe06 	bl	8006d18 <pvPortMalloc>
 800610c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f843 	bl	80061b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006130:	697b      	ldr	r3, [r7, #20]
	}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08a      	sub	sp, #40	; 0x28
 800613e:	af02      	add	r7, sp, #8
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006148:	232c      	movs	r3, #44	; 0x2c
 800614a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b2c      	cmp	r3, #44	; 0x2c
 8006150:	d00a      	beq.n	8006168 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	61bb      	str	r3, [r7, #24]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xTimerCreateStatic+0x4c>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	617b      	str	r3, [r7, #20]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f805 	bl	80061b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80061ac:	69fb      	ldr	r3, [r7, #28]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	617b      	str	r3, [r7, #20]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01e      	beq.n	8006224 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80061e6:	f000 fae7 	bl	80067b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fa86 	bl	8004718 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006218:	f043 0304 	orr.w	r3, r3, #4
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006224:	bf00      	nop
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800623a:	2300      	movs	r3, #0
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800625a:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <xTimerGenericCommand+0x98>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02a      	beq.n	80062b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b05      	cmp	r3, #5
 8006272:	dc18      	bgt.n	80062a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006274:	f7ff fe18 	bl	8005ea8 <xTaskGetSchedulerState>
 8006278:	4603      	mov	r3, r0
 800627a:	2b02      	cmp	r3, #2
 800627c:	d109      	bne.n	8006292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <xTimerGenericCommand+0x98>)
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f107 0110 	add.w	r1, r7, #16
 8006286:	2300      	movs	r3, #0
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	f7fe fbdd 	bl	8004a48 <xQueueGenericSend>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24
 8006290:	e012      	b.n	80062b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <xTimerGenericCommand+0x98>)
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f107 0110 	add.w	r1, r7, #16
 800629a:	2300      	movs	r3, #0
 800629c:	2200      	movs	r2, #0
 800629e:	f7fe fbd3 	bl	8004a48 <xQueueGenericSend>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24
 80062a4:	e008      	b.n	80062b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <xTimerGenericCommand+0x98>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f107 0110 	add.w	r1, r7, #16
 80062ae:	2300      	movs	r3, #0
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	f7fe fcc7 	bl	8004c44 <xQueueGenericSendFromISR>
 80062b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3728      	adds	r7, #40	; 0x28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20001164 	.word	0x20001164

080062c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	4b22      	ldr	r3, [pc, #136]	; (800635c <prvProcessExpiredTimer+0x94>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fa83 	bl	80047ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d022      	beq.n	800633a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	18d1      	adds	r1, r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	6978      	ldr	r0, [r7, #20]
 8006302:	f000 f8d1 	bl	80064a8 <prvInsertTimerInActiveList>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01f      	beq.n	800634c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800630c:	2300      	movs	r3, #0
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	2300      	movs	r3, #0
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	2100      	movs	r1, #0
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff ff88 	bl	800622c <xTimerGenericCommand>
 800631c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d113      	bne.n	800634c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	b2da      	uxtb	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	6978      	ldr	r0, [r7, #20]
 8006352:	4798      	blx	r3
}
 8006354:	bf00      	nop
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	2000115c 	.word	0x2000115c

08006360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f857 	bl	8006420 <prvGetNextExpireTime>
 8006372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f803 	bl	8006384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800637e:	f000 f8d5 	bl	800652c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006382:	e7f1      	b.n	8006368 <prvTimerTask+0x8>

08006384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800638e:	f7ff f99f 	bl	80056d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f866 	bl	8006468 <prvSampleTimeNow>
 800639c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d130      	bne.n	8006406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <prvProcessTimerOrBlockTask+0x3c>
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d806      	bhi.n	80063c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063b2:	f7ff f99b 	bl	80056ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff ff85 	bl	80062c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063be:	e024      	b.n	800640a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <prvProcessTimerOrBlockTask+0x90>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <prvProcessTimerOrBlockTask+0x50>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <prvProcessTimerOrBlockTask+0x52>
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <prvProcessTimerOrBlockTask+0x94>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	f7fe fee3 	bl	80051b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ea:	f7ff f97f 	bl	80056ec <xTaskResumeAll>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <prvProcessTimerOrBlockTask+0x98>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
}
 8006404:	e001      	b.n	800640a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006406:	f7ff f971 	bl	80056ec <xTaskResumeAll>
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20001160 	.word	0x20001160
 8006418:	20001164 	.word	0x20001164
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006428:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <prvGetNextExpireTime+0x44>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <prvGetNextExpireTime+0x16>
 8006432:	2201      	movs	r2, #1
 8006434:	e000      	b.n	8006438 <prvGetNextExpireTime+0x18>
 8006436:	2200      	movs	r2, #0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <prvGetNextExpireTime+0x44>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e001      	b.n	8006454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	2000115c 	.word	0x2000115c

08006468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006470:	f7ff f9da 	bl	8005828 <xTaskGetTickCount>
 8006474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <prvSampleTimeNow+0x3c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d205      	bcs.n	800648c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006480:	f000 f936 	bl	80066f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e002      	b.n	8006492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006492:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <prvSampleTimeNow+0x3c>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000116c 	.word	0x2000116c

080064a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d812      	bhi.n	80064f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e01b      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <prvInsertTimerInActiveList+0x7c>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe f944 	bl	800477a <vListInsert>
 80064f2:	e012      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d206      	bcs.n	800650a <prvInsertTimerInActiveList+0x62>
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e007      	b.n	800651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvInsertTimerInActiveList+0x80>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fe f930 	bl	800477a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800651a:	697b      	ldr	r3, [r7, #20]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20001160 	.word	0x20001160
 8006528:	2000115c 	.word	0x2000115c

0800652c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08e      	sub	sp, #56	; 0x38
 8006530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006532:	e0ca      	b.n	80066ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	da18      	bge.n	800656c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	3304      	adds	r3, #4
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	61fb      	str	r3, [r7, #28]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006562:	6850      	ldr	r0, [r2, #4]
 8006564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006566:	6892      	ldr	r2, [r2, #8]
 8006568:	4611      	mov	r1, r2
 800656a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f2c0 80aa 	blt.w	80066c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	3304      	adds	r3, #4
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe f931 	bl	80047ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800658a:	463b      	mov	r3, r7
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff ff6b 	bl	8006468 <prvSampleTimeNow>
 8006592:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b09      	cmp	r3, #9
 8006598:	f200 8097 	bhi.w	80066ca <prvProcessReceivedCommands+0x19e>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <prvProcessReceivedCommands+0x78>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065cd 	.word	0x080065cd
 80065b0:	08006641 	.word	0x08006641
 80065b4:	08006655 	.word	0x08006655
 80065b8:	0800669f 	.word	0x0800669f
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065cd 	.word	0x080065cd
 80065c4:	08006641 	.word	0x08006641
 80065c8:	08006655 	.word	0x08006655
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	18d1      	adds	r1, r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ec:	f7ff ff5c 	bl	80064a8 <prvInsertTimerInActiveList>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d069      	beq.n	80066ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d05e      	beq.n	80066ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	441a      	add	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	2100      	movs	r1, #0
 800661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661e:	f7ff fe05 	bl	800622c <xTimerGenericCommand>
 8006622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d14f      	bne.n	80066ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006652:	e03a      	b.n	80066ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	617b      	str	r3, [r7, #20]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006698:	f7ff ff06 	bl	80064a8 <prvInsertTimerInActiveList>
					break;
 800669c:	e015      	b.n	80066ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f000 fbff 	bl	8006eb0 <vPortFree>
 80066b2:	e00a      	b.n	80066ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066c6:	e000      	b.n	80066ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <prvProcessReceivedCommands+0x1c0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1d39      	adds	r1, r7, #4
 80066d0:	2200      	movs	r2, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fb52 	bl	8004d7c <xQueueReceive>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f af2a 	bne.w	8006534 <prvProcessReceivedCommands+0x8>
	}
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20001164 	.word	0x20001164

080066f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066f6:	e048      	b.n	800678a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066f8:	4b2d      	ldr	r3, [pc, #180]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe f86b 	bl	80047ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02e      	beq.n	800678a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d90e      	bls.n	800675c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fe f810 	bl	800477a <vListInsert>
 800675a:	e016      	b.n	800678a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800675c:	2300      	movs	r3, #0
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2300      	movs	r3, #0
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fd60 	bl	800622c <xTimerGenericCommand>
 800676c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	603b      	str	r3, [r7, #0]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1b1      	bne.n	80066f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 80067a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6013      	str	r3, [r2, #0]
}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	2000115c 	.word	0x2000115c
 80067b4:	20001160 	.word	0x20001160

080067b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067be:	f000 f989 	bl	8006ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvCheckForValidListAndQueue+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d120      	bne.n	800680c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ca:	4814      	ldr	r0, [pc, #80]	; (800681c <prvCheckForValidListAndQueue+0x64>)
 80067cc:	f7fd ff84 	bl	80046d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067d0:	4813      	ldr	r0, [pc, #76]	; (8006820 <prvCheckForValidListAndQueue+0x68>)
 80067d2:	f7fd ff81 	bl	80046d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <prvCheckForValidListAndQueue+0x6c>)
 80067d8:	4a10      	ldr	r2, [pc, #64]	; (800681c <prvCheckForValidListAndQueue+0x64>)
 80067da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <prvCheckForValidListAndQueue+0x70>)
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <prvCheckForValidListAndQueue+0x68>)
 80067e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <prvCheckForValidListAndQueue+0x74>)
 80067e8:	4a11      	ldr	r2, [pc, #68]	; (8006830 <prvCheckForValidListAndQueue+0x78>)
 80067ea:	2110      	movs	r1, #16
 80067ec:	200a      	movs	r0, #10
 80067ee:	f7fe f88f 	bl	8004910 <xQueueGenericCreateStatic>
 80067f2:	4603      	mov	r3, r0
 80067f4:	4a08      	ldr	r2, [pc, #32]	; (8006818 <prvCheckForValidListAndQueue+0x60>)
 80067f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <prvCheckForValidListAndQueue+0x60>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <prvCheckForValidListAndQueue+0x60>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	490b      	ldr	r1, [pc, #44]	; (8006834 <prvCheckForValidListAndQueue+0x7c>)
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fca8 	bl	800515c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800680c:	f000 f992 	bl	8006b34 <vPortExitCritical>
}
 8006810:	bf00      	nop
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20001164 	.word	0x20001164
 800681c:	20001134 	.word	0x20001134
 8006820:	20001148 	.word	0x20001148
 8006824:	2000115c 	.word	0x2000115c
 8006828:	20001160 	.word	0x20001160
 800682c:	20001210 	.word	0x20001210
 8006830:	20001170 	.word	0x20001170
 8006834:	08007384 	.word	0x08007384

08006838 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <pvTimerGetTimerID+0x28>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60fb      	str	r3, [r7, #12]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006860:	f000 f938 	bl	8006ad4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800686a:	f000 f963 	bl	8006b34 <vPortExitCritical>

	return pvReturn;
 800686e:	693b      	ldr	r3, [r7, #16]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3b04      	subs	r3, #4
 8006888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b04      	subs	r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f023 0201 	bic.w	r2, r3, #1
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068a8:	4a0c      	ldr	r2, [pc, #48]	; (80068dc <pxPortInitialiseStack+0x64>)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3b14      	subs	r3, #20
 80068b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b04      	subs	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f06f 0202 	mvn.w	r2, #2
 80068c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3b20      	subs	r3, #32
 80068cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	080068e1 	.word	0x080068e1

080068e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <prvTaskExitError+0x54>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f2:	d00a      	beq.n	800690a <prvTaskExitError+0x2a>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <prvTaskExitError+0x28>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	60bb      	str	r3, [r7, #8]
}
 800691c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800691e:	bf00      	nop
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0fc      	beq.n	8006920 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20000010 	.word	0x20000010
	...

08006940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <pxCurrentTCBConst2>)
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	6808      	ldr	r0, [r1, #0]
 8006946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	f380 8809 	msr	PSP, r0
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8811 	msr	BASEPRI, r0
 800695a:	4770      	bx	lr
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst2>:
 8006960:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006968:	4808      	ldr	r0, [pc, #32]	; (800698c <prvPortStartFirstTask+0x24>)
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f380 8808 	msr	MSP, r0
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8814 	msr	CONTROL, r0
 800697a:	b662      	cpsie	i
 800697c:	b661      	cpsie	f
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	df00      	svc	0
 8006988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800698a:	bf00      	nop
 800698c:	e000ed08 	.word	0xe000ed08

08006990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006996:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <xPortStartScheduler+0x120>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a46      	ldr	r2, [pc, #280]	; (8006ab4 <xPortStartScheduler+0x124>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10a      	bne.n	80069b6 <xPortStartScheduler+0x26>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069b6:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <xPortStartScheduler+0x120>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <xPortStartScheduler+0x128>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10a      	bne.n	80069d6 <xPortStartScheduler+0x46>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <xPortStartScheduler+0x12c>)
 80069d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <xPortStartScheduler+0x130>)
 80069fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a04:	e009      	b.n	8006a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a06:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d0ef      	beq.n	8006a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1c3 0307 	rsb	r3, r3, #7
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00a      	beq.n	8006a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a14      	ldr	r2, [pc, #80]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a7e:	f000 f8dd 	bl	8006c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <xPortStartScheduler+0x13c>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a88:	f000 f8fc 	bl	8006c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <xPortStartScheduler+0x140>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <xPortStartScheduler+0x140>)
 8006a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a98:	f7ff ff66 	bl	8006968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a9c:	f7fe ff8e 	bl	80059bc <vTaskSwitchContext>
	prvTaskExitError();
 8006aa0:	f7ff ff1e 	bl	80068e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	e000ed00 	.word	0xe000ed00
 8006ab4:	410fc271 	.word	0x410fc271
 8006ab8:	410fc270 	.word	0x410fc270
 8006abc:	e000e400 	.word	0xe000e400
 8006ac0:	20001260 	.word	0x20001260
 8006ac4:	20001264 	.word	0x20001264
 8006ac8:	e000ed20 	.word	0xe000ed20
 8006acc:	20000010 	.word	0x20000010
 8006ad0:	e000ef34 	.word	0xe000ef34

08006ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	607b      	str	r3, [r7, #4]
}
 8006aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <vPortEnterCritical+0x58>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <vPortEnterCritical+0x58>)
 8006af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <vPortEnterCritical+0x58>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10f      	bne.n	8006b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortEnterCritical+0x5c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	603b      	str	r3, [r7, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vPortEnterCritical+0x4a>
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000010 	.word	0x20000010
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <vPortExitCritical+0x50>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <vPortExitCritical+0x24>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <vPortExitCritical+0x50>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <vPortExitCritical+0x50>)
 8006b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <vPortExitCritical+0x50>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <vPortExitCritical+0x42>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f383 8811 	msr	BASEPRI, r3
}
 8006b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000010 	.word	0x20000010
	...

08006b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b90:	f3ef 8009 	mrs	r0, PSP
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <pxCurrentTCBConst>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	f01e 0f10 	tst.w	lr, #16
 8006ba0:	bf08      	it	eq
 8006ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	6010      	str	r0, [r2, #0]
 8006bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006bb4:	f380 8811 	msr	BASEPRI, r0
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f7fe fefc 	bl	80059bc <vTaskSwitchContext>
 8006bc4:	f04f 0000 	mov.w	r0, #0
 8006bc8:	f380 8811 	msr	BASEPRI, r0
 8006bcc:	bc09      	pop	{r0, r3}
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	6808      	ldr	r0, [r1, #0]
 8006bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd6:	f01e 0f10 	tst.w	lr, #16
 8006bda:	bf08      	it	eq
 8006bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006be0:	f380 8809 	msr	PSP, r0
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst>:
 8006bf0:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c12:	f7fe fe19 	bl	8005848 <xTaskIncrementTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <xPortSysTickHandler+0x40>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <vPortSetupTimerInterrupt+0x38>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <vPortSetupTimerInterrupt+0x3c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <vPortSetupTimerInterrupt+0x40>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <vPortSetupTimerInterrupt+0x44>)
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c60:	2207      	movs	r2, #7
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e010 	.word	0xe000e010
 8006c74:	e000e018 	.word	0xe000e018
 8006c78:	20000004 	.word	0x20000004
 8006c7c:	10624dd3 	.word	0x10624dd3
 8006c80:	e000e014 	.word	0xe000e014

08006c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c94 <vPortEnableVFP+0x10>
 8006c88:	6801      	ldr	r1, [r0, #0]
 8006c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c8e:	6001      	str	r1, [r0, #0]
 8006c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c92:	bf00      	nop
 8006c94:	e000ed88 	.word	0xe000ed88

08006c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c9e:	f3ef 8305 	mrs	r3, IPSR
 8006ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d914      	bls.n	8006cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006caa:	4a17      	ldr	r2, [pc, #92]	; (8006d08 <vPortValidateInterruptPriority+0x70>)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <vPortValidateInterruptPriority+0x74>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	7afa      	ldrb	r2, [r7, #11]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d20a      	bcs.n	8006cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <vPortValidateInterruptPriority+0x78>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <vPortValidateInterruptPriority+0x7c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d90a      	bls.n	8006cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	603b      	str	r3, [r7, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <vPortValidateInterruptPriority+0x60>
	}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	e000e3f0 	.word	0xe000e3f0
 8006d0c:	20001260 	.word	0x20001260
 8006d10:	e000ed0c 	.word	0xe000ed0c
 8006d14:	20001264 	.word	0x20001264

08006d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d24:	f7fe fcd4 	bl	80056d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d28:	4b5b      	ldr	r3, [pc, #364]	; (8006e98 <pvPortMalloc+0x180>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d30:	f000 f920 	bl	8006f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d34:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <pvPortMalloc+0x184>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 8093 	bne.w	8006e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01d      	beq.n	8006d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d48:	2208      	movs	r2, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
 8006d60:	3308      	adds	r3, #8
 8006d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <pvPortMalloc+0x6c>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06e      	beq.n	8006e68 <pvPortMalloc+0x150>
 8006d8a:	4b45      	ldr	r3, [pc, #276]	; (8006ea0 <pvPortMalloc+0x188>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d869      	bhi.n	8006e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d94:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <pvPortMalloc+0x18c>)
 8006d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <pvPortMalloc+0x18c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d9e:	e004      	b.n	8006daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d903      	bls.n	8006dbc <pvPortMalloc+0xa4>
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f1      	bne.n	8006da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dbc:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <pvPortMalloc+0x180>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d050      	beq.n	8006e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	4413      	add	r3, r2
 8006dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	2308      	movs	r3, #8
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d91f      	bls.n	8006e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <pvPortMalloc+0xf8>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	613b      	str	r3, [r7, #16]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	1ad2      	subs	r2, r2, r3
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e22:	69b8      	ldr	r0, [r7, #24]
 8006e24:	f000 f908 	bl	8007038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e28:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e36:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <pvPortMalloc+0x190>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d203      	bcs.n	8006e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e42:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <pvPortMalloc+0x190>)
 8006e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <pvPortMalloc+0x184>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <pvPortMalloc+0x194>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <pvPortMalloc+0x194>)
 8006e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e68:	f7fe fc40 	bl	80056ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <pvPortMalloc+0x174>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <pvPortMalloc+0x172>
	return pvReturn;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20001e70 	.word	0x20001e70
 8006e9c:	20001e84 	.word	0x20001e84
 8006ea0:	20001e74 	.word	0x20001e74
 8006ea4:	20001e68 	.word	0x20001e68
 8006ea8:	20001e78 	.word	0x20001e78
 8006eac:	20001e7c 	.word	0x20001e7c

08006eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04d      	beq.n	8006f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	425b      	negs	r3, r3
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4413      	add	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <vPortFree+0xb8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <vPortFree+0x44>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	60fb      	str	r3, [r7, #12]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <vPortFree+0x62>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <vPortFree+0xb8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11a      	bne.n	8006f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <vPortFree+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f38:	f7fe fbca 	bl	80056d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <vPortFree+0xbc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <vPortFree+0xbc>)
 8006f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f000 f874 	bl	8007038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vPortFree+0xc0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vPortFree+0xc0>)
 8006f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f5a:	f7fe fbc7 	bl	80056ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20001e84 	.word	0x20001e84
 8006f6c:	20001e74 	.word	0x20001e74
 8006f70:	20001e80 	.word	0x20001e80

08006f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <prvHeapInit+0xac>)
 8006f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3307      	adds	r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <prvHeapInit+0xac>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <prvHeapInit+0xb0>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <prvHeapInit+0xb0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <prvHeapInit+0xb4>)
 8006fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <prvHeapInit+0xb4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvHeapInit+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <prvHeapInit+0xb4>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <prvHeapInit+0xb8>)
 8007002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <prvHeapInit+0xbc>)
 800700a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvHeapInit+0xc0>)
 800700e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20001268 	.word	0x20001268
 8007024:	20001e68 	.word	0x20001e68
 8007028:	20001e70 	.word	0x20001e70
 800702c:	20001e78 	.word	0x20001e78
 8007030:	20001e74 	.word	0x20001e74
 8007034:	20001e84 	.word	0x20001e84

08007038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <prvInsertBlockIntoFreeList+0xac>)
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <prvInsertBlockIntoFreeList+0x14>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d8f7      	bhi.n	8007046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d118      	bne.n	80070c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d00d      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e008      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e003      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d002      	beq.n	80070d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20001e68 	.word	0x20001e68
 80070e8:	20001e70 	.word	0x20001e70

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f000 f8f2 	bl	80072e8 <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	08007524 	.word	0x08007524
 8007128:	08007524 	.word	0x08007524
 800712c:	08007524 	.word	0x08007524
 8007130:	08007528 	.word	0x08007528

08007134 <__retarget_lock_acquire_recursive>:
 8007134:	4770      	bx	lr

08007136 <__retarget_lock_release_recursive>:
 8007136:	4770      	bx	lr

08007138 <memcpy>:
 8007138:	440a      	add	r2, r1
 800713a:	4291      	cmp	r1, r2
 800713c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007140:	d100      	bne.n	8007144 <memcpy+0xc>
 8007142:	4770      	bx	lr
 8007144:	b510      	push	{r4, lr}
 8007146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800714e:	4291      	cmp	r1, r2
 8007150:	d1f9      	bne.n	8007146 <memcpy+0xe>
 8007152:	bd10      	pop	{r4, pc}

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <cleanup_glue>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	6809      	ldr	r1, [r1, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	b109      	cbz	r1, 8007172 <cleanup_glue+0xe>
 800716e:	f7ff fff9 	bl	8007164 <cleanup_glue>
 8007172:	4621      	mov	r1, r4
 8007174:	4628      	mov	r0, r5
 8007176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717a:	f000 b869 	b.w	8007250 <_free_r>
	...

08007180 <_reclaim_reent>:
 8007180:	4b2c      	ldr	r3, [pc, #176]	; (8007234 <_reclaim_reent+0xb4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4283      	cmp	r3, r0
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	d051      	beq.n	8007230 <_reclaim_reent+0xb0>
 800718c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800718e:	b143      	cbz	r3, 80071a2 <_reclaim_reent+0x22>
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d14a      	bne.n	800722c <_reclaim_reent+0xac>
 8007196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	b111      	cbz	r1, 80071a2 <_reclaim_reent+0x22>
 800719c:	4620      	mov	r0, r4
 800719e:	f000 f857 	bl	8007250 <_free_r>
 80071a2:	6961      	ldr	r1, [r4, #20]
 80071a4:	b111      	cbz	r1, 80071ac <_reclaim_reent+0x2c>
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 f852 	bl	8007250 <_free_r>
 80071ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071ae:	b111      	cbz	r1, 80071b6 <_reclaim_reent+0x36>
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 f84d 	bl	8007250 <_free_r>
 80071b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071b8:	b111      	cbz	r1, 80071c0 <_reclaim_reent+0x40>
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f848 	bl	8007250 <_free_r>
 80071c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071c2:	b111      	cbz	r1, 80071ca <_reclaim_reent+0x4a>
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 f843 	bl	8007250 <_free_r>
 80071ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071cc:	b111      	cbz	r1, 80071d4 <_reclaim_reent+0x54>
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f83e 	bl	8007250 <_free_r>
 80071d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071d6:	b111      	cbz	r1, 80071de <_reclaim_reent+0x5e>
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f839 	bl	8007250 <_free_r>
 80071de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071e0:	b111      	cbz	r1, 80071e8 <_reclaim_reent+0x68>
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 f834 	bl	8007250 <_free_r>
 80071e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ea:	b111      	cbz	r1, 80071f2 <_reclaim_reent+0x72>
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f82f 	bl	8007250 <_free_r>
 80071f2:	69a3      	ldr	r3, [r4, #24]
 80071f4:	b1e3      	cbz	r3, 8007230 <_reclaim_reent+0xb0>
 80071f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071f8:	4620      	mov	r0, r4
 80071fa:	4798      	blx	r3
 80071fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071fe:	b1b9      	cbz	r1, 8007230 <_reclaim_reent+0xb0>
 8007200:	4620      	mov	r0, r4
 8007202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007206:	f7ff bfad 	b.w	8007164 <cleanup_glue>
 800720a:	5949      	ldr	r1, [r1, r5]
 800720c:	b941      	cbnz	r1, 8007220 <_reclaim_reent+0xa0>
 800720e:	3504      	adds	r5, #4
 8007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007212:	2d80      	cmp	r5, #128	; 0x80
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	d1f8      	bne.n	800720a <_reclaim_reent+0x8a>
 8007218:	4620      	mov	r0, r4
 800721a:	f000 f819 	bl	8007250 <_free_r>
 800721e:	e7ba      	b.n	8007196 <_reclaim_reent+0x16>
 8007220:	680e      	ldr	r6, [r1, #0]
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f814 	bl	8007250 <_free_r>
 8007228:	4631      	mov	r1, r6
 800722a:	e7ef      	b.n	800720c <_reclaim_reent+0x8c>
 800722c:	2500      	movs	r5, #0
 800722e:	e7ef      	b.n	8007210 <_reclaim_reent+0x90>
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	bf00      	nop
 8007234:	20000014 	.word	0x20000014

08007238 <__malloc_lock>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__malloc_lock+0x8>)
 800723a:	f7ff bf7b 	b.w	8007134 <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	20001e88 	.word	0x20001e88

08007244 <__malloc_unlock>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__malloc_unlock+0x8>)
 8007246:	f7ff bf76 	b.w	8007136 <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	20001e88 	.word	0x20001e88

08007250 <_free_r>:
 8007250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007252:	2900      	cmp	r1, #0
 8007254:	d044      	beq.n	80072e0 <_free_r+0x90>
 8007256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725a:	9001      	str	r0, [sp, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f1a1 0404 	sub.w	r4, r1, #4
 8007262:	bfb8      	it	lt
 8007264:	18e4      	addlt	r4, r4, r3
 8007266:	f7ff ffe7 	bl	8007238 <__malloc_lock>
 800726a:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <_free_r+0x94>)
 800726c:	9801      	ldr	r0, [sp, #4]
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	b933      	cbnz	r3, 8007280 <_free_r+0x30>
 8007272:	6063      	str	r3, [r4, #4]
 8007274:	6014      	str	r4, [r2, #0]
 8007276:	b003      	add	sp, #12
 8007278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800727c:	f7ff bfe2 	b.w	8007244 <__malloc_unlock>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d908      	bls.n	8007296 <_free_r+0x46>
 8007284:	6825      	ldr	r5, [r4, #0]
 8007286:	1961      	adds	r1, r4, r5
 8007288:	428b      	cmp	r3, r1
 800728a:	bf01      	itttt	eq
 800728c:	6819      	ldreq	r1, [r3, #0]
 800728e:	685b      	ldreq	r3, [r3, #4]
 8007290:	1949      	addeq	r1, r1, r5
 8007292:	6021      	streq	r1, [r4, #0]
 8007294:	e7ed      	b.n	8007272 <_free_r+0x22>
 8007296:	461a      	mov	r2, r3
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b10b      	cbz	r3, 80072a0 <_free_r+0x50>
 800729c:	42a3      	cmp	r3, r4
 800729e:	d9fa      	bls.n	8007296 <_free_r+0x46>
 80072a0:	6811      	ldr	r1, [r2, #0]
 80072a2:	1855      	adds	r5, r2, r1
 80072a4:	42a5      	cmp	r5, r4
 80072a6:	d10b      	bne.n	80072c0 <_free_r+0x70>
 80072a8:	6824      	ldr	r4, [r4, #0]
 80072aa:	4421      	add	r1, r4
 80072ac:	1854      	adds	r4, r2, r1
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	6011      	str	r1, [r2, #0]
 80072b2:	d1e0      	bne.n	8007276 <_free_r+0x26>
 80072b4:	681c      	ldr	r4, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	6053      	str	r3, [r2, #4]
 80072ba:	4421      	add	r1, r4
 80072bc:	6011      	str	r1, [r2, #0]
 80072be:	e7da      	b.n	8007276 <_free_r+0x26>
 80072c0:	d902      	bls.n	80072c8 <_free_r+0x78>
 80072c2:	230c      	movs	r3, #12
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	e7d6      	b.n	8007276 <_free_r+0x26>
 80072c8:	6825      	ldr	r5, [r4, #0]
 80072ca:	1961      	adds	r1, r4, r5
 80072cc:	428b      	cmp	r3, r1
 80072ce:	bf04      	itt	eq
 80072d0:	6819      	ldreq	r1, [r3, #0]
 80072d2:	685b      	ldreq	r3, [r3, #4]
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	bf04      	itt	eq
 80072d8:	1949      	addeq	r1, r1, r5
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	6054      	str	r4, [r2, #4]
 80072de:	e7ca      	b.n	8007276 <_free_r+0x26>
 80072e0:	b003      	add	sp, #12
 80072e2:	bd30      	pop	{r4, r5, pc}
 80072e4:	20001e8c 	.word	0x20001e8c

080072e8 <_init>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr

080072f4 <_fini>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	bf00      	nop
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr
